! function() {
    const e = chrome.extension.getBackgroundPage();
    let s, t, n;

    function o() {
        s = e.me[0], t = s ? "+" + s.id.user : null, n = t || "+1"
    }

    function a() {}
    o(), window.PopupPage = a, a.appContainer = $(".app-container"), a.pageContainer = null, a.defaultProps = {
        headerRendered: !1,
        navRendered: !1,
        messagePageRendered: !1,
        pageContainerCreated: !1,
        footerRendered: !1,
        inactiveSubscriptionRendered: !1,
        sendMessageChooseRecipientsRendered: !1,
        sendMessageChooseRecipientsLGBRendered: !1,
        sendMessageChooseRecipientsExcelRendered: !1,
        sendMessageChooseRecipientsListRendered: !1,
        sendMessageChooseRecipientsGroupsRendered: !1,
        sendMessageChooseRecipientsBroadcastsRendered: !1,
        sendMessageChooseRecipientsLabelsRendered: !1,
        sendMessageChooseRecipientsLGBType: "list",
        sendMessageSelectAttachmentsRendered: !1,
        sendMessageTextBoxRendered: !1,
        sendMessageTimerSettingsRendered: !1,
        message: "",
        messageAsCaption: !1,
        addOptOutMessage: !1,
        isMessagePreviewOn: !1,
        optOutMessage: "If you don't want to receive messages from us, just reply *NO*. We will never message you again from any number.",
        isUploadExcelForContactsChecked: !1,
        isMessageTimerSettingsOpen: !1,
        isTimeDelayBetweenMessagesEnabled: !1,
        isBatchMessagingEnabled: !1,
        messageDelay: 0,
        batchNo: 0,
        batchDelay: 0,
        randomizeMessageDelay: !1,
        recipients: {
            broadcasts: [],
            groups: [],
            contacts: [],
            labels: [],
            excel: {
                contacts: [],
                filename: "",
                sheet: "",
                sheets: [],
                count: 0,
                columns: [],
                column: 0,
                start: 0,
                end: 0,
                workbook: null,
                lastSentSheet: "",
                lastFilteredSheet: ""
            },
            list_country_code: "",
            excel_country_code: "",
            filtered: {
                list: {
                    valids: [],
                    failures: []
                },
                excel: {
                    valids: [],
                    failures: []
                }
            }
        },
        attachments: [],
        reportsRendered: !1,
        reportsIndividualRendered: !1,
        filterReportsRendered: !1,
        reports: {
            individual: [],
            groups: []
        },
        page: "sendMessage",
        isBusy: !1,
        busyPageOverlayRendered: !1,
        exportPageRendered: !1,
        toBeExported: {
            allContacts: !1,
            allChats: !1,
            groups: !1,
            selectedGroups: [],
            labels: !1,
            broadcasts: !1,
            selectedBroadcasts: []
        },
        editTemplateRendered: !1,
        addTemplateRendered: !1,
        selectedTemplate: null,
        loaderRendered: !1,
        enhancementPageRendered: !1,
        enhancements: {
            blurRecentMessages: !1,
            blurContactNames: !1,
            blurContactPhotos: !1,
            blurConversationMessages: !1,
            enableLikeButton: !1,
            enableMessageReactions: !1,
            pinUnreadChats: !1,
            removeDuplicateContacts: !1
        },
        filterContacts: [],
        filterValids: [],
        filterInvalids: [],
        filterPendings: [],
        filterCountryCode: "",
        filterPaused: !1,
        filterStarttime: null
    }, a.props = {
        headerRendered: !1,
        navRendered: !1,
        messagePageRendered: !1,
        pageContainerCreated: !1,
        footerRendered: !1,
        inactiveSubscriptionRendered: !1,
        sendMessageChooseRecipientsRendered: !1,
        sendMessageChooseRecipientsLGBRendered: !1,
        sendMessageChooseRecipientsExcelRendered: !1,
        sendMessageChooseRecipientsListRendered: !1,
        sendMessageChooseRecipientsGroupsRendered: !1,
        sendMessageChooseRecipientsBroadcastsRendered: !1,
        sendMessageChooseRecipientsLabelsRendered: !1,
        sendMessageChooseRecipientsLGBType: "list",
        sendMessageSelectAttachmentsRendered: !1,
        sendMessageTextBoxRendered: !1,
        sendMessageTimerSettingsRendered: !1,
        message: "",
        messageAsCaption: !1,
        timeAtLast: !1,
        addOptOutMessage: !1,
        isMessagePreviewOn: !1,
        optOutMessage: "If you don't want to receive messages from us, just reply *NO*. We will never message you again from any number.",
        isUploadExcelForContactsChecked: !1,
        isMessageTimerSettingsOpen: !1,
        isTimeDelayBetweenMessagesEnabled: !1,
        isBatchMessagingEnabled: !1,
        messageDelay: 0,
        batchNo: 0,
        batchDelay: 0,
        randomizeMessageDelay: !1,
        recipients: {
            broadcasts: [],
            groups: [],
            contacts: [],
            labels: [],
            excel: {
                contacts: [],
                filename: "",
                sheet: "",
                sheets: [],
                count: 0,
                columns: [],
                column: 0,
                start: 0,
                end: 0,
                workbook: null,
                lastSentSheet: "",
                lastFilteredSheet: ""
            },
            list_country_code: "",
            excel_country_code: "",
            filtered: {
                list: {
                    valids: [],
                    failures: []
                },
                excel: {
                    valids: [],
                    failures: []
                }
            }
        },
        attachments: [],
        reportsRendered: !1,
        reportsIndividualRendered: !1,
        filterReportsRendered: !1,
        reports: {
            individual: [],
            groups: []
        },
        page: "sendMessage",
        isBusy: !1,
        busyPageOverlayRendered: !1,
        exportPageRendered: !1,
        toBeExported: {
            allContacts: !1,
            allChats: !1,
            allUnSaved: !1,
            allArchived: !1,
            groups: !1,
            selectedGroups: [],
            labels: !1,
            broadcasts: !1,
            selectedBroadcasts: [],
            selectedlabels: []
        },
        editTemplateRendered: !1,
        addTemplateRendered: !1,
        selectedTemplate: null,
        loaderRendered: !1,
        enhancementPageRendered: !1,
        enhancements: {
            blurRecentMessages: !1,
            blurContactNames: !1,
            blurContactPhotos: !1,
            blurConversationMessages: !1,
            enableLikeButton: !1,
            enableMessageReactions: !1,
            pinUnreadChats: !1,
            removeDuplicateContacts: !1
        },
        filterContacts: [],
        filterValids: [],
        filterInvalids: [],
        filterPendings: [],
        filterCountryCode: "",
        filterPaused: !1,
        filterStarttime: null
    }, a.staticOnMount = {
        headerRendered: !1,
        navRendered: !1,
        messagePageRendered: !1,
        pageContainerCreated: !1,
        inactiveSubscriptionRendered: !1,
        sendMessageChooseRecipientsRendered: !1,
        sendMessageChooseRecipientsLGBRendered: !1,
        sendMessageChooseRecipientsExcelRendered: !1,
        sendMessageChooseRecipientsListRendered: !1,
        sendMessageChooseRecipientsGroupsRendered: !1,
        sendMessageChooseRecipientsBroadcastsRendered: !1,
        sendMessageChooseRecipientsLabelsRendered: !1,
        sendMessageSelectAttachmentsRendered: !1,
        sendMessageTextBoxRendered: !1,
        sendMessageTimerSettingsRendered: !1,
        reportsRendered: !1,
        reportsIndividualRendered: !1,
        filterReportsRendered: !1,
        busyPageOverlayRendered: !1,
        exportPageRendered: !1,
        footerRendered: !1,
        editTemplateRendered: !1,
        addTemplateRendered: !1,
        loaderRendered: !1,
        enhancementPageRendered: !1
    }, a.isActive = function() {
        return this.props.profile && this.props.profile.status
    }, a.countryCode = function(e) {
        return "00" === e ? "" : e
    }, a.GenerateMessage = function(e) {
        var s = (this.props.message + (this.props.addOptOutMessage ? `\n\n${this.props.optOutMessage}` : "")).trim();
        if (this.isActive() && this.props.isUploadExcelForContactsChecked && this.props.recipients.excel.columns.length > 0) {
            const t = XLSX.utils.sheet_to_json(this.props.recipients.excel.workbook.Sheets[this.props.recipients.excel.sheet], {
                    raw: !1
                }),
                n = e && t.filter((s => s.__rowNum__ === e.__rowNum__))[0];
            this.props.recipients.excel.columns.forEach((e => {
                s = s.replaceAll(`{{${e}}}`, `${n?n[e]:"Nil"}`)
            }))
        }
        return s
    };
    a.liveSupport = function(s) {
        var t = chrome.runtime.getManifest();
        $(document.body).on("click", '.clsLiveSupport', (s => {
            if (!confirm("Are you sure you want to contact the WA Biz Sender Support?")) return;
            s.preventDefault();
            const n = "Hi,\nI need help for *WA Biz Sender*.\nI am a *" + (this.isActive() ? "Pro" : "Free") + "* User.\nVersion: *" + t.version + "*\nThanks.";
            e.sendMessage({
                type: "pws::send-message",
                task: {
                    text: n,
                    recipients: [{
                        type: "phone",
                        id: this.props.profile.support_no,
                        entity: {
                            name: this.props.profile.support_no
                        },
                        message: n
                    }]
                }
            })
        }))
    }, a.headerTemplate = function() {
        return `\n            <div class="header-links">\n                <div class="other-links">\n                    <span class="logoaction logoactionx d-none"><img class="procrown" src="../img/main-icon.png"/></span>\n                    <span class="logoaction">WA Biz Sender Lite</span>\n                </div>\n                <div class="other-links">\n                    <a href="https://chrome.google.com/webstore/detail/wa-biz-free-bulk-sender/njlokjfmljicmjpongdkpgkpcemppmbn/reviews" target="_blank" data-i18n="nav.faq"></a>\n                    <a href="#" class="clsLiveSupport"><i class="wa icon-question-o"></i>${i18next.t("nav.liveSupport")}</a>\n                    <a href="#" data-i18n="nav.clientArea"></a>\n                    <a href="https://wabiz.in" target="_blank"><span data-i18n="nav.version"></span>: ${chrome.runtime.getManifest().version}</a>\n                </div>\n            </div>`
    }, a.renderHeaderTemplate = function() {
        this.props.headerRendered || this.appContainer.append($(this.headerTemplate())), $(".header-links").localize(), this.props.headerRendered = !0
    }, a.liveSupport(), a.clientArea = function(s) {
        chrome.runtime.getManifest();
        $(document.body).on("click", 'a[data-i18n="nav.clientArea"]', (s => {
            if (s.preventDefault(), !confirm("Are you sure you want to go to WA Biz Client Portal?")) return;
            e.me.length && e.me[0].id && e.me[0].id.user;
            this.props.profile ? window.open("https://portal.wabiz.in?areamobile=" + this.props.profile.mobile + "&name=" + encodeURI(e.me[0].displayName) + "&hash=" + this.props.profile.set / 7.5 * 12 + "&salt=" + btoa(this.props.profile.mobile + "," + this.props.profile.set / 7.5)) : window.open("https://portal.wabiz.in")
        }))
    }, a.clientArea(), a.buynow = function(s) {
        chrome.runtime.getManifest();
        $(document.body).on("click", ".sub-expiration-1", (s => {
            s.preventDefault();
            const n = e.me.length && e.me[0].id && e.me[0].id.user;
            window.open("https://wabiz.in/#pricing?mobile=" + n.replace("+", "") + "&name=" + encodeURI(e.me[0].displayName))
        }))
    }, a.buynow(), a.footerTemplate = function() {
        return `\n <div class="footer px-2">\n<p class="mb-0 text-light user-name" style="font-weight: 500;"></p>\n<input type="hidden" value="" id="phoneNumber">\n <div class="my-0 d-flex justify-content-between">\n<select name="preferred-locale">\n\n</select>\n<p class="mb-0 text-light sub-expiration ml-5" style="font-weight: 500; display: none;"></p><p class="mb-0 text-light sub-expiration-1 ml-2 buy-now-class" >Buy Now</p>\n<div>\n </div>`
    }, a.renderFooterTemplate = function() {
        this.props.footerRendered || this.appContainer.append($(this.footerTemplate()));
        const t = $(".footer"),
            n = t.find.bind(t);
        n("p.sub-expiration").css({
            display: "none"
        }), n("p.sub-expiration-1").css({
            display: "none"
        }), s ? (n("p.user-name").text(`${s.displayName.length>20?s.displayName.substr(0,19)+"...":s.displayName} +${s.id.user}`), this.props.profile && this.props.profile.status ? n("p.sub-expiration").css({
            display: "block"
        }).text(i18next.t("remainingSubscription", {
            days: this.props.profile.daysremaining
        })) : (n("p.sub-expiration").css({
            display: "block"
        }).text(i18next.t("noActiveSubscription")), n("p.sub-expiration-1").css({
            display: "block"
        }))) : n("p").css({
            display: "none"
        }), this.props.profile && this.props.profile.status ? $(".logoactionx").removeClass("d-none") : $(".logoactionx").addClass("d-none");
        const o = Object.keys(e.supportedLanguages);
        $("select[name=preferred-locale]").empty(), o.forEach((s => {
            $("select[name=preferred-locale]").append(`<option value="${s}" ${e.language===s?"selected":""}>${e.supportedLanguages[s]}</option>`)
        })), $("select[name=preferred-locale]").off().on("change", (s => {
            const t = $("select[name=preferred-locale]").val().trim();
            e.supportedLanguages[t] && (e.language = t), setTimeout((() => window.location.reload()), 1e3)
        })).select2({
            minimumResultsForSearch: -1
        }), this.props.footerRendered = !0
    }, a.navLinks = function() {
        return '\n <div class="nav-links">\n <a href="#" data-page="sendMessage" data-i18n="nav.sendMessage"></a>\n <a href="#" data-page="enhancements" data-i18n="nav.enhancements"></a>\n                <a href="#" data-page="export" data-i18n="nav.export"></a>\n                <a href="#" data-page="reports" data-i18n="nav.report"></a>\n            </div>\n        '
    }, a.renderNavLinks = function() {
        this.props.navRendered || this.appContainer.append($(this.navLinks()));
        const e = $(".nav-links");
        e.find.bind(e)("a").off().on("click", (e => {
            this.props.page = $(e.target).data("page"), this.render()
        })), e.localize(), this.props.navRendered = !0
    }, a.renderPageContainer = function() {
        this.props.pageContainerCreated || this.appContainer.append(jQuery('<div class="page-content px-3 py-1"></div>')), this.pageContainer = $(".page-content"), this.props.pageContainerCreated = !0
    }, a.sendMessageChooseRecipientsComponent = function() {
        return `\n<div class="choose-message-type">\n <div class="h6 section-heading-underline pb-2 mt-2 mb-2">\n <span data-i18n="chooseNumbers" style="color: #aaa;font-size: small;"></span>\n <button class="btn btn-default" style="line-height: 1;padding: 4px 6px;margin-left: 5px;" id="excel-upload"><span class="icon icon-file-excel-o fs16 vam"></span> ${i18next.t("uploadExcel")}</button>\n <label style="margin-right: 10px; margin-bottom: 0px; cursor: pointer; font-weight: 500;" class="text-primary">\n <input type="radio" name="list-group-broadcasts" value="list">\n                        <span data-i18n="contactList"></span>\n                    </label>\n                    <label style="margin-right: 10px; margin-bottom: 0px; cursor: pointer; font-weight: 500;" class="text-primary">\n                        <input type="radio" name="list-group-broadcasts" value="groups">\n                        <span data-i18n="contactGroups"></span>\n                    </label>\n                    <label style="margin-right: 10px; margin-bottom: 0px; cursor: pointer; font-weight: 500;" class="text-primary">\n                        <input type="radio" name="list-group-broadcasts" value="labels">\n                        <span data-i18n="contactlabels"></span>\n                    </label>\n                </div>\n                <div class="contact-method">\n                    \n                </div>\n            </div>\n        `
        //return '\n            <div class="choose-message-type">\n                <div class="h6 section-heading-underline pb-2 mt-2 mb-2">\n                    1. <span data-i18n="chooseNumbers"></span>\n                    <span style="margin-left: 10px; margin-right: 10px; cursor: pointer;" class="text-primary" id="excel-upload" data-i18n="uploadExcelForCustomization"></span>\n                    <label style="margin-right: 10px; margin-bottom: 0px; cursor: pointer; font-weight: 500;" class="text-primary">\n                        <input type="radio" name="list-group-broadcasts" value="list">\n                        <span data-i18n="contactList"></span>\n                    </label>\n                    <label style="margin-right: 10px; margin-bottom: 0px; cursor: pointer; font-weight: 500;" class="text-primary">\n                        <input type="radio" name="list-group-broadcasts" value="groups">\n                        <span data-i18n="contactGroups"></span>\n                    </label>\n                    <label style="margin-right: 10px; margin-bottom: 0px; cursor: pointer; font-weight: 500;display:none !important;" class="text-primary">\n                        <input type="radio" name="list-group-broadcasts" value="broadcasts">\n                        <span data-i18n="contactBroadcasts"></span>\n                    </label>\n                    <label style="margin-right: 10px; margin-bottom: 0px; cursor: pointer; font-weight: 500;" class="text-primary">\n                        <input type="radio" name="list-group-broadcasts" value="labels">\n                        <span data-i18n="contactlabels"></span>\n                    </label>\n                </div>\n                <div class="contact-method">\n                    \n                </div>\n            </div>\n        '
    }, a.renderSendMessageChooseRecipientsComponent = function() {
        this.props.sendMessageChooseRecipientsRendered || this.pageContainer && this.pageContainer.append(this.sendMessageChooseRecipientsComponent());
        const s = $(".choose-message-type"),
            t = s.find.bind(s);
        t("#excel-upload").off().on("click", (e => {
            t("[name=contact-excel-file]").trigger("click")
        })), t("input[name=contact-excel-file]").remove(), s.append('<input type="file" name="contact-excel-file" style="display: none;" accept=".xls,.xlsx,.csv">'), t("[name=contact-excel-file]").off().on("change", (t => {
            const n = t.target.files[0];
            if (n) {
                if (n.size > 2e6) return alert(i18next.t("fileSizeTooLarge"));
                if (this.props.reports.individual.length > 0 && void 0 !== this.props.reports.individual[0].__rowNum__ && (this.props.recipients.excel.sheets.includes(this.props.recipients.excel.lastSentSheet) || this.props.recipients.excel.sheets.includes(this.props.recipients.excel.lastFilteredSheet))) {
                    if (!confirm("Some reports depend on the existing excel file, if you proceed with the upload you will lose those reports")) return;
                    console.log("Good to go")
                }
                this.props.isUploadExcelForContactsChecked = !0, this.renderSendMessageChooseRecipientsComponent(), this.props.sendMessageChooseRecipientsLGBType = "", s.find(".contact-excel-filename").text(i18next.t("processing")),
                    function(e) {
                        return new Promise(((s, t) => {
                            try {
                                var n = new FileReader,
                                    o = {
                                        filename: e.name
                                    };
                                n.onload = function(e) {
                                    try {
                                        const n = new Uint8Array(e.target.result),
                                            a = XLSX.read(n, {
                                                type: "array"
                                            });
                                        if (!(a.SheetNames && a.SheetNames.length > 0)) return t(i18next.t("errors.couldNotDetectExcelSheet"));
                                        o.sheets = a.SheetNames, o.sheet = a.SheetNames[0], o.workbook = a;
                                        const i = XLSX.utils.sheet_to_json(o.workbook.Sheets[o.sheet], {
                                                raw: !1
                                            }),
                                            r = function(e) {
                                                let s = 0;
                                                const t = Object.keys(e[0] || {}),
                                                    n = g(e);
                                                for (let e = 0; e < t.length; e++) {
                                                    var o = n[0] && n[0][t[e]];
                                                    if (o = o ? o.replace(/\s/g, "") : "", !isNaN(o) && o.length > 6) {
                                                        s = e;
                                                        break
                                                    }
                                                }
                                                return s
                                            }(i),
                                            {
                                                start: p,
                                                end: l,
                                                count: c,
                                                columns: d,
                                                contacts: h
                                            } = m(i, void 0, void 0, r);
                                        o.start = p, o.end = l, o.count = c, o.columns = d, o.column = r, o.contacts = h, s(o)
                                    } catch (e) {
                                        console.log(e), t(e)
                                    }
                                }, n.onerror = function(e) {
                                    t(e)
                                }, n.readAsArrayBuffer(e)
                            } catch (e) {
                                t(e)
                            }
                        }))
                    }(n).then((t => {
                        this.props.recipients.excel = { ...this.props.recipients.excel,
                            ...t
                        }, this.props.reports.individual = [], e.reports.individual = [], this.renderSendMessageChooseRecipientsComponent(), this.renderSendMessageTextBoxComponent(), s.find(".contact-excel-filename").text(this.props.recipients.excel.filename || "")
                    })).catch((e => {
                        console.log(e), this.props.recipients.excel = { ...g(this.defaultProps.recipients.excel)
                        }, this.renderSendMessageChooseRecipientsComponent(), this.renderSendMessageTextBoxComponent(), s.find(".contact-excel-filename").text(i18next.t("invalidFile"))
                    }))
            }
        })), [...t("input[name=list-group-broadcasts]")].forEach((e => {
            t(e).off().on("change", (e => {
                $(e.target).prop("checked") && (this.props.sendMessageChooseRecipientsLGBType = $(e.target).val(), this.props.isUploadExcelForContactsChecked = !1, this.disposeSendMessageChooseRecipientsExcelComponent()), this.renderSendMessageChooseRecipientsLGBComponent()
            })).prop("checked", this.props.sendMessageChooseRecipientsLGBType === $(e).val())
        })), this.props.isUploadExcelForContactsChecked ? (this.disposeSendMessageChooseRecipientsLGBComponent(), this.renderSendMessageChooseRecipientsExcelComponent()) : (this.disposeSendMessageChooseRecipientsExcelComponent(), this.renderSendMessageChooseRecipientsLGBComponent()), s.localize(), this.props.sendMessageChooseRecipientsRendered = !0
    }, a.disposeSendMessageChooseRecipientsComponent = function() {
        this.disposeSendMessageChooseRecipientsLGBComponent(), this.disposeSendMessageChooseRecipientsExcelComponent(), $(".choose-message-type").remove(), this.props.sendMessageChooseRecipientsRendered = !1
    }, a.sendMessageChooseRecipientsLGBComponent = function() {
        return '\n            <div class="contacts-list"></div>\n        '
    }, a.renderSendMessageChooseRecipientsLGBComponent = function() {
        const e = $(".choose-message-type .contact-method");
        switch (this.props.sendMessageChooseRecipientsLGBRendered || e.append(this.sendMessageChooseRecipientsLGBComponent()), this.props.sendMessageChooseRecipientsLGBType) {
            case "list":
                this.disposeSendMessageChooseRecipientsGroupsComponent(), this.disposeSendMessageChooseRecipientsBroadcastsComponent(), this.disposeSendMessageChooseRecipientsLabelsComponent(), this.renderSendMessageChooseRecipientsListComponent();
                break;
            case "groups":
                this.disposeSendMessageChooseRecipientsListComponent(), this.disposeSendMessageChooseRecipientsBroadcastsComponent(), this.disposeSendMessageChooseRecipientsLabelsComponent(), this.renderSendMessageChooseRecipientsGroupsComponent();
                break;
            case "broadcasts":
                this.disposeSendMessageChooseRecipientsListComponent(), this.disposeSendMessageChooseRecipientsGroupsComponent(), this.disposeSendMessageChooseRecipientsLabelsComponent(), this.renderSendMessageChooseRecipientsBroadcastsComponent();
                break;
            case "labels":
                this.disposeSendMessageChooseRecipientsListComponent(), this.disposeSendMessageChooseRecipientsGroupsComponent(), this.disposeSendMessageChooseRecipientsBroadcastsComponent(), this.renderSendMessageChooseRecipientsLabelsComponent()
        }
        this.props.sendMessageChooseRecipientsLGBRendered = !0
    }, a.disposeSendMessageChooseRecipientsLGBComponent = function() {
        $(".choose-message-type").find(".contacts-list").remove(), this.disposeSendMessageChooseRecipientsListComponent(), this.disposeSendMessageChooseRecipientsGroupsComponent(), this.disposeSendMessageChooseRecipientsBroadcastsComponent(), this.disposeSendMessageChooseRecipientsLabelsComponent(), this.props.sendMessageChooseRecipientsLGBRendered = !1
    }, a.sendMessageChooseRecipientsListComponent = function() {
        return '\n            <div class="list">\n                <div class="text-secondary d-flex justify-content-end">\n                    <a href="#" class="clear-phone-list">\n                        <i class="icon-bin"></i>\n                    </a>\n                </div>\n                <div class="form-group input-group mb-0 text-left d-flex">\n                    <span class="p-0 min-width-max-content centered-flexbox">\n                        <input type="tel" name="contact-country-code" style="width: 0px;">\n                    </span>\n                    <span class="d-flex-grow position-relative controlled-width-1">\n                        <input type="text" name="phones" placeholder="Enter Numbers">\n                    </span>\n                </div>\n                <div class="text-right text-secondary">\n                    <span class="download-filtered-numbers" style="cursor: pointer;">\n                        <span class="result"></span>\n                        <span class="text-primary icon-download mr-2"></span>\n                    </span>\n                    <span class="run-whatsapp-filter d-none" style="cursor: pointer;" data-i18n="runWhatsappFilter"></span>\n                    <span style="cursor: pointer;" class="run-whatsapp-filter-cancel d-none text-danger" data-i18n="cancelWhatsappFilter"></span>\n                </div>\n            </div>\n        '
    };
    let i = [];
    a.renderSendMessageChooseRecipientsListComponent = function() {
        const s = $(".choose-message-type .contact-method .contacts-list");
        this.props.sendMessageChooseRecipientsListRendered || s.append(this.sendMessageChooseRecipientsListComponent());
        let t = [];
        const o = () => {
                const e = this.props.recipients.filtered.list.valids.length,
                    s = this.props.recipients.filtered.list.failures.length,
                    n = s || e;
                n || p(".list .tokenfield .token").removeClass("invalid"), p(".list .run-whatsapp-filter").off().on("click", r).toggleClass("d-none", !this.props.recipients.contacts.length > 0), p(".download-filtered-numbers").css({
                    display: n ? "initial" : "none"
                }), p(".download-filtered-numbers .result").text(`${e} ${i18next.t("valid")}, ${s} ${i18next.t("invalid")}`), "" === this.props.recipients.list_country_code && (this.props.recipients.list_country_code = "1"), "55" != this.props.recipients.list_country_code && (t = this.props.recipients.contacts.filter((e => !h(e, this.props.recipients.list_country_code).isValid))), i = t, [...p(".list .tokenfield .token")].forEach((e => {
                    const s = $(e),
                        n = s.find(".token-label").text().trim();
                    t.includes(n) ? s.addClass("invalid") : s.removeClass("invalid")
                })), p(".tokenfield.form-control .invalid-numbers").remove(), t.length > 0 && p(".tokenfield.form-control").append($(`<div class="invalid-numbers">${t.length}</div>`)), p(".clear-phone-list").css({
                    display: this.props.recipients.contacts.length ? "block" : "none"
                }).off().on("click", (e => {
                    e.preventDefault();
                    window.confirm("Are you sure you want clear list?") && (p(".list input[name=phones]").tokenfield("setTokens", []), this.props.recipients.contacts = [], this.renderSendMessageChooseRecipientsListComponent())
                })), p(".iti").find(".iti").remove()
            },
            a = e => {
                let {
                    failures: s,
                    valids: t
                } = e;
                this.props.recipients.filtered.list = {
                    failures: s,
                    valids: t
                }, o()
            },
            r = () => {
                if (!this.isActive()) return this.renderInactiveSubscriptionComponent();
                setTimeout((() => {
                    const s = g(this.props.recipients.contacts).map((e => ({
                        value: this.countryCode(this.props.recipients.list_country_code) + e
                    })));
                    if (s.length < 1) return this.props.recipients.filtered.list = { ...g(this.defaultProps.recipients.filtered.list)
                    }, o();
                    this.props.isBusy = !0, this.props.filterCountryCode = this.props.recipients.list_country_code, this.props.page = "reports", this.render(), e.FilterWhatsAppNumbers(s, "list").then((e => a(e))).catch(console.log).finally((() => {
                        e.filterPromise = null, e.filtering = !1, this.props.isBusy = !1, this.render()
                    }))
                }), 0)
            },
            p = s.find.bind(s),
            l = p(".list [name=contact-country-code]").off().on("countrychange", (e => {
                const {
                    dialCode: s
                } = c.getSelectedCountryData();
                this.props.recipients.list_country_code = s, this.props.recipients.filtered.list = { ...g(this.defaultProps.recipients.filtered.list)
                }, o()
            })).get(0);
        let c = window.intlTelInputGlobals.getInstance(l);
        if (!c) {
            c = window.intlTelInput(l, {
                separateDialCode: !0
            });
            let e = this.props.recipients.list_country_code || n;
            e = "+" === e.charAt(0) ? e : "+" + e, c.setNumber(e)
        }
        p(".list input[name=phones]").off().on("tokenfield:createtoken", (e => {
            if (!this.isActive() && this.props.recipients.contacts.length >= 200) return alert("Maximum you can enter in list is 200, you are a FREE USER upgrade to Pro if you need more"), this.renderInactiveSubscriptionComponent();
            if (this.props.recipients.contacts.length >= 500) return alert("Maximum you can enter in list is 500, you can upload excel if you need more");
            let s = e.attrs.value.trim().split("").filter((e => e && " " !== e && !isNaN(e))).join("").trim();
            return e.attrs.value = s, e.attrs.label = s, !!s && !isNaN(s)
        })).on("tokenfield:createdtoken tokenfield:editedtoken tokenfield:removedtoken", (() => {
            clearTimeout(window.tokenFieldTimeout), window.tokenFieldTimeout = setTimeout((() => {
                this.props.recipients.contacts = p(".list input[name=phones]").tokenfield("getTokens").map((e => Object.values(e)[0])).filter((e => e))
            }), 500), this.props.recipients.filtered.list = { ...g(this.defaultProps.recipients.filtered.list)
            }
        })).tokenfield({
            createTokensOnBlur: !0,
            delimiter: [",", "\n", "\t"]
        }).data("bs.tokenfield").$input.off("paste").on("paste", (e => {
            var s = $(e.target),
                t = $('<textarea style="opacity: 0;"></textarea>');
            t.bind("blur", (e => {
                const s = t.val().replace(/\r?\n/g, ",").split(",").filter((e => !!e));
                var n = s.map((e => "910" === e.slice(0, 3) ? e.replace("910", "91") : e));
                const o = [...this.props.recipients.contacts, ...n];
                return t.remove(), !this.isActive() && o.length >= 200 ? (alert("Maximum you can enter in list is 200, you are a FREE USER upgrade to Pro if you need more"), this.renderInactiveSubscriptionComponent()) : o.length >= 500 ? alert("Maximum you can enter in list is 500, you can upload excel if you need more") : (this.props.recipients.contacts = g(o), void this.renderSendMessageChooseRecipientsListComponent())
            })), $("body").append(t), t.focus(), setTimeout((function() {
                s.focus(), s.blur(), s.focus()
            }), 10)
        })), p(".list input[name=phones]").tokenfield("setTokens", this.props.recipients.contacts), p(".list .run-whatsapp-filter-cancel").off().on("click", (() => {
            "list" === e.filterComponent && e.cancelFiltering && e.cancelFiltering()
        })), p(".list .download-filtered-numbers").off().on("click", (e => u(this.props.recipients.filtered.list.valids, this.props.recipients.filtered.list.failures, this.props.recipients.list_country_code))), o(), e.filterPromise && "list" === e.filterComponent && e.filterPromise.then(a).finally((() => {
            e.filterPromise = null
        })), p(".list").localize(), this.props.sendMessageChooseRecipientsListRendered = !0
    }, a.disposeSendMessageChooseRecipientsListComponent = function() {
        $(".choose-message-type").find(".contacts-list .list").remove(), this.props.sendMessageChooseRecipientsListRendered = !1
    }, a.sendMessageChooseRecipientsGroupsComponent = function() {
        return '\n            <div class="groups">\n                <div class="text-secondary mb-1 d-flex justify-content-end">\n                    <a href="#" class="clear-group-list">\n                        <i class="icon-bin"></i>\n                    </a>\n                </div>\n                <div class="form-group input-group mb-0">\n                    <select name="groups" class="w-100">\n                        \n                    </select>\n                </div>\n            </div>\n        '
    }, a.renderSendMessageChooseRecipientsGroupsComponent = function() {
        const s = $(".choose-message-type .contact-method .contacts-list");
        this.props.sendMessageChooseRecipientsGroupsRendered || s.append(this.sendMessageChooseRecipientsGroupsComponent());
        const t = s.find.bind(s),
            n = () => {
                const e = [...t(".groups [name=groups]").parent().find(".lcslt .lcslt-multi-selected")].map((e => t(e).data("val")));
                this.props.recipients.groups = e, t(".clear-group-list").css({
                    display: this.props.recipients.groups.length ? "block" : "none"
                }).off().on("click", (e => {
                    e.preventDefault();
                    window.confirm("Are you sure you want clear list?") && (this.props.recipients.groups = [], this.renderSendMessageChooseRecipientsGroupsComponent())
                }))
            };
        p(t(".groups [name=groups]"), n, g(this.props.recipients.groups)), e.groups.length < 1 && (this.props.recipients.groups = []), n(), t(".groups").localize(), this.props.sendMessageChooseRecipientsGroupsRendered = !0
    }, a.disposeSendMessageChooseRecipientsGroupsComponent = function() {
        $(".choose-message-type").find(".contacts-list .groups").remove(), this.props.sendMessageChooseRecipientsGroupsRendered = !1
    }, a.sendMessageChooseRecipientsLabelsComponent = function() {
        return '\n            <div class="labels">\n                <div class="text-secondary mb-1 d-flex justify-content-end">\n                    <a href="#" class="clear-label-list">\n                        <i class="icon-bin"></i>\n                    </a>\n                </div>\n                <div class="form-group input-group mb-0">\n                    <select name="labels" class="w-100">\n                        \n                    </select>\n                </div>\n            </div>\n        '
    }, a.sendMessageChooseRecipientsLabelsComponentNotApplicable = function() {
        return '\n            <div class="labels">\n                <div class="text-secondary mb-1 d-flex justify-content-center alert-warning">\n                    <b class="pt-2 pb-2 text-danger">labels are not applicable in Personal WhatsApp. It only works with Business WhatsApp.</b>\n                </div>                \n            </div>\n        '
    }, a.renderSendMessageChooseRecipientsLabelsComponent = function() {
        const t = $(".choose-message-type .contact-method .contacts-list");
        if (!s.isBusiness) return void t.append(this.sendMessageChooseRecipientsLabelsComponentNotApplicable());
        this.props.sendMessageChooseRecipientsLabelsRendered || t.append(this.sendMessageChooseRecipientsLabelsComponent());
        const n = t.find.bind(t),
            o = () => {
                const e = [...n(".labels [name=labels]").parent().find(".lcslt .lcslt-multi-selected")].map((e => n(e).data("val")));
                this.props.recipients.labels = e, n(".clear-label-list").css({
                    display: this.props.recipients.labels.length ? "block" : "none"
                }).off().on("click", (e => {
                    e.preventDefault();
                    window.confirm("Are you sure you want clear list?") && (this.props.recipients.labels = [], this.renderSendMessageChooseRecipientsLabelsComponent())
                }))
            };
        l(n(".labels [name=labels]"), o, g(this.props.recipients.labels)), e.labels.length < 1 && (this.props.recipients.labels = []), o(), n(".labels").localize(), this.props.sendMessageChooseRecipientsLabelsRendered = !0
    }, a.disposeSendMessageChooseRecipientsLabelsComponent = function() {
        $(".choose-message-type").find(".contacts-list .labels").remove(), this.props.sendMessageChooseRecipientsLabelsRendered = !1
    }, a.sendMessageChooseRecipientsBroadcastsComponent = function() {
        return '\n            <div class="broadcasts">\n                <div class="text-secondary mb-1 d-flex justify-content-end">\n                    <a href="#" class="clear-broadcast-list">\n                        <i class="icon-bin"></i>\n                    </a>\n                </div>\n                <div class="form-group input-group mb-0">\n                    <select name="broadcasts" class="w-100">\n                        \n                    </select>\n                </div>\n            </div>\n        '
    }, a.renderSendMessageChooseRecipientsBroadcastsComponent = function() {
        const s = $(".choose-message-type .contact-method .contacts-list");
        this.props.sendMessageChooseRecipientsBroadcastsRendered || s.append(this.sendMessageChooseRecipientsBroadcastsComponent());
        const t = s.find.bind(s),
            n = () => {
                const e = [...t(".broadcasts [name=broadcasts]").parent().find(".lcslt .lcslt-multi-selected")].map((e => t(e).data("val")));
                this.props.recipients.broadcasts = e, t(".clear-broadcast-list").css({
                    display: this.props.recipients.broadcasts.length ? "block" : "none"
                }).off().on("click", (e => {
                    e.preventDefault();
                    window.confirm("Are you sure you want clear list?") && (this.props.recipients.broadcasts = [], this.renderSendMessageChooseRecipientsBroadcastsComponent())
                }))
            };
        c(t(".broadcasts [name=broadcasts]"), n, this.props.recipients.broadcasts), e.broadcasts.length < 1 && (this.props.recipients.broadcasts = []), n(), t(".broadcasts").localize(), this.props.sendMessageChooseRecipientsBroadcastsRendered = !0
    }, a.disposeSendMessageChooseRecipientsBroadcastsComponent = function() {
        $(".choose-message-type").find(".contacts-list .broadcasts").remove(), this.props.sendMessageChooseRecipientsBroadcastsRendered = !1
    }, a.sendMessageChooseRecipientsExcelComponent = function() {
        return '\n            <div class="excel-list text-secondary mb-1 mt-4 px-3 py-2"\n                style="border: 1px solid #0076ce; border-radius: 10px; position: relative;">\n                <span style="position: absolute; background-color: #ffffff; top: -15px; left: 5px; padding: 0px 5px;" data-i18n="uploadExcelForCustomization"></span>\n                <div class="d-flex mb-1" style="font-size: 14px;">\n                    <div class="d-flex flex-column" style="flex: 1;">\n                        <span data-i18n="excelFile"></span>\n                        <span class="d-flex align-items-center open-file-selector mt-2" style="cursor: pointer;">\n                            <span style="font-size: 20px;" class="mr-2">\n                                <i class="icon-file-excel-o d-flex"></i>\n                            </span>\n                            <span class="mr-2 text-primary contact-excel-filename" style="font-size: 14px;"></span>\n                            <span style="font-size: 20px;">\n                                <i class="icon-edit d-flex"></i>\n                            </span>\n                        </span>\n                    </div>\n                    <div class="d-flex flex-column" style="flex: 1;">\n                        <span data-i18n="workingSheet"></span>\n                        <span class="mt-2">\n                            <select name="excel-sheets" style="max-width: 150px; font-size: 12px;"></select>\n                        </span>\n                    </div>\n                    <div class="d-flex flex-column" style="flex: 1;">\n                        <span data-i18n="numbersColumn"></span>\n                        <span class="mt-2">\n                            <select name="excel-columns" style="max-width: 150px; font-size: 12px;"></select>\n                        </span>\n                    </div>\n                    <div class="d-flex flex-column" style="flex: 1;">\n                        <span class="d-flex">\n                            <span class="mr-2" style="width: 40px;"><span data-i18n="from"></span>:</span>\n                            <input type="text" name="excel-from" style="font-size: 12px; width: 60px;">\n                        </span>\n                        <span class="d-flex mt-1">\n                            <span class="mr-2" style="width: 40px;"><span data-i18n="to"></span>:</span>\n                            <input type="text" name="excel-to" style="font-size: 12px; width: 60px;">\n                        </span>\n                    </div>\n                    <div class="ml-2">\n                        <a href="#">\n                            <i class="icon-bin"></i>\n                        </a>\n                    </div>\n                </div>\n                <div class="form-group input-group mb-0 text-left d-flex">\n                    <span class="p-0 min-width-max-content centered-flexbox">\n                        <input type="tel" name="contact-country-code" style="width: 0px;">\n                        \n                    </span>\n                    <span class="d-flex-grow position-relative controlled-width-1">\n                        <input type="text" name="phones" readonly>\n                    </span>\n                </div>\n                <div class="d-flex justify-content-between">\n                    <span class="stats">\n                        Max: 0&nbsp;&nbsp;Count: 0\n                    </span>\n                    <span>\n                        <span class="download-filtered-numbers" style="cursor: pointer;">\n                            <span class="result">3 Valid, 4 Invalid</span>\n                            <span class="text-primary icon-download mr-2"></span>\n                        </span>\n                        <span style="cursor: pointer;" class="run-whatsapp-filter" data-i18n="runWhatsappFilter"></span>\n                        <span style="cursor: pointer;" class="run-whatsapp-filter-cancel d-none text-danger" data-i18n="cancelWhatsappFilter"></span>\n                    </span>\n                </div>\n            </div>\n        '
    }, a.renderSendMessageChooseRecipientsExcelComponent = function() {
        const s = $(".choose-message-type .contact-method");
        this.props.sendMessageChooseRecipientsExcelRendered || s.append(this.sendMessageChooseRecipientsExcelComponent());
        let t = [];
        const o = () => {
                const e = this.props.recipients.filtered.excel.valids.length,
                    s = this.props.recipients.filtered.excel.failures.length,
                    n = s || e;
                n || r(".excel-list .tokenfield .token").removeClass("invalid"), "" === this.props.recipients.excel_country_code && (this.props.recipients.excel_country_code = "1"), "55" != this.props.recipients.excel_country_code && (t = this.props.recipients.excel.contacts.filter((e => !h(e.value, this.props.recipients.excel_country_code).isValid)).map((e => e.value))), i = t, [...r(".excel-list .tokenfield .token")].forEach((e => {
                    const s = $(e),
                        n = s.find(".token-label").text().trim();
                    t.includes(n) ? s.addClass("invalid") : s.removeClass("invalid")
                })), r(".tokenfield.form-control .invalid-numbers").remove(), t.length > 0 && r(".tokenfield.form-control").append($(`<div class="invalid-numbers">${t.length}</div>`)), r(".download-filtered-numbers").css({
                    display: n ? "initial" : "none"
                }), r(".download-filtered-numbers .result").text(`${e} ${i18next.t("valid")}, ${s} ${i18next.t("invalid")}`), r(".iti").find(".iti").remove()
            },
            a = e => {
                let {
                    failures: s,
                    valids: t
                } = e;
                this.props.recipients.filtered.excel = {
                    failures: s,
                    valids: t
                }, o()
            },
            r = s.find.bind(s),
            p = r(".excel-list [name=contact-country-code]").off().on("countrychange", (e => {
                const {
                    dialCode: s
                } = l.getSelectedCountryData();
                this.props.recipients.excel_country_code = s, this.props.recipients.filtered.excel = { ...g(this.defaultProps.recipients.filtered.excel)
                };
                const t = g(this.props.recipients.excel),
                    n = XLSX.utils.sheet_to_json(t.workbook.Sheets[t.sheet], {
                        raw: !1
                    }),
                    {
                        count: a,
                        contacts: i
                    } = m(n, t.start, t.end, t.column);
                t.count = a, t.contacts = i, this.props.recipients.excel = g(t), c(), o()
            })).get(0);
        let l = window.intlTelInputGlobals.getInstance(p);
        if (!l) {
            l = window.intlTelInput(p, {
                separateDialCode: !0
            });
            let e = this.props.recipients.excel_country_code || n;
            e = "+" === e.charAt(0) ? e : "+" + e, l.setNumber(e)
        }
        const c = () => {
            r(".excel-list input[name=phones]").off().on("tokenfield:createtoken", (function(e) {
                if ("pws-extras" === e.attrs.value.trim()) return !0;
                let s = e.attrs.value.trim().split("").filter((e => e && " " !== e && !isNaN(e))).join("").trim();
                return e.attrs.value = s, e.attrs.label = s, !!s && !isNaN(s)
            })).on("tokenfield:createdtoken tokenfield:editedtoken tokenfield:removedtoken", (() => {
                r(".stats").html(`Max: ${this.props.recipients.excel.count}&nbsp;&nbsp;Count: ${this.props.recipients.excel.contacts.length}`), this.props.recipients.filtered.excel = { ...g(this.defaultProps.recipients.filtered.excel)
                }
            })).tokenfield();
            let e = [],
                s = this.props.recipients.excel.contacts;
            s.length > 50 ? (s.slice(0, 50).forEach((s => e.push(s))), e.push({
                value: "pws-extras",
                label: ` + *${s.length-50} more`
            })) : s.forEach((s => e.push(s))), r(".excel-list input[name=phones]").tokenfield("setTokens", []), r(".excel-list input[name=phones]").tokenfield("setTokens", e)
        };
        c(), r(".contact-excel-filename").text(this.props.recipients.excel.filename || i18next.t("uploadExcel")), r(".open-file-selector").off().on("click", (function() {
            s.closest(".choose-message-type").find("[name=contact-excel-file]").trigger("click")
        })), this.props.recipients.excel.sheets.length < 1 ? r("[name=excel-sheets]").html('<option data-i18n="selectSheet"></option>') : (r("[name=excel-sheets]").html(`<option ${this.props.recipients.excel.sheet?"":"selected"} data-i18n="selectSheet"></option>`), this.props.recipients.excel.sheets.forEach((e => {
            r("[name=excel-sheets]").append(`<option value="${e}" ${this.props.recipients.excel.sheet===e?"selected":""}>${e}</option>`)
        }))), this.props.recipients.excel.columns.length < 1 ? r("[name=excel-columns]").html('<option data-i18n="selectColumn"></option>') : (this.props.recipients.excel.column = this.props.recipients.excel.column || 0, r("[name=excel-columns]").html(`<option ${this.props.recipients.excel.columns[this.props.recipients.excel.column]?"":"selected"} data-i18n="selectColumn"></option>`), this.props.recipients.excel.columns.forEach((e => {
            r("[name=excel-columns]").append(`<option value="${e}" ${this.props.recipients.excel.columns[this.props.recipients.excel.column]===e?"selected":""}>${e}</option>`)
        }))), r("select[name=excel-sheets]").off().on("change", (e => {
            const s = $(e.target).val().trim(),
                t = g(this.props.recipients.excel);
            if (!t.sheets.includes(s)) return this.props.recipients.excel = { ...g(t),
                start: 0,
                end: 0,
                count: 0,
                contacts: []
            }, this.renderSendMessageChooseRecipientsExcelComponent();
            t.sheet = s;
            const n = XLSX.utils.sheet_to_json(t.workbook.Sheets[t.sheet], {
                    raw: !1
                }),
                {
                    start: o,
                    end: a,
                    count: i,
                    columns: r,
                    contacts: p
                } = m(n, 0, 0);
            t.start = o, t.end = a, t.count = i, t.columns = r, t.column = 0, t.contacts = p, this.props.recipients.excel = g(t), this.renderSendMessageChooseRecipientsExcelComponent(), this.renderSendMessageTextBoxComponent()
        })), r("select[name=excel-columns]").off().on("change", (e => {
            const s = $(e.target).val().trim();
            if (!this.props.recipients.excel.columns.includes(s)) return this.props.recipients.excel = { ...g(this.props.recipients.excel),
                contacts: []
            }, this.renderSendMessageChooseRecipientsExcelComponent();
            for (let e = 0; e < this.props.recipients.excel.columns.length; e++) this.props.recipients.excel.columns[e] === s && (this.props.recipients.excel.column = e);
            const t = XLSX.utils.sheet_to_json(this.props.recipients.excel.workbook.Sheets[this.props.recipients.excel.sheet], {
                    raw: !1
                }),
                {
                    contacts: n
                } = m(t, this.props.recipients.excel.start, this.props.recipients.excel.end, this.props.recipients.excel.column);
            var o = g(n).map((e => "910" === e.slice(0, 3) ? e.replace("910", "91") : e));
            this.props.recipients.excel.contacts = g(o), this.renderSendMessageChooseRecipientsExcelComponent()
        })), r(".icon-bin").off().on("click", (e => {
            e.preventDefault();
            window.confirm("Are you sure you want clear list?") && (this.props.recipients.excel = { ...g(this.defaultProps.recipients.excel)
            }, this.props.isUploadExcelForContactsChecked = !1, this.renderSendMessageChooseRecipientsComponent(), this.renderSendMessageTextBoxComponent())
        })), e.filterPromise && "excel" === e.filterComponent && e.filterPromise.then(a).finally((() => {
            e.filterPromise = null
        })), r(".run-whatsapp-filter").off().on("click", (() => {
            if (!this.isActive()) return this.renderInactiveSubscriptionComponent();
            setTimeout((() => {
                const s = g(this.props.recipients.excel.contacts).map((e => ({ ...e,
                    value: this.countryCode(this.props.recipients.excel_country_code) + e.value
                })));
                if (s.length < 1) return this.props.recipients.filtered.excel = { ...g(this.defaultProps.recipients.filtered.excel)
                }, o();
                this.props.isBusy = !0, this.props.filterCountryCode = this.props.recipients.excel_country_code, this.props.page = "reports", this.render(), this.props.recipients.excel.lastFilteredSheet = this.props.recipients.excel.sheet, e.FilterWhatsAppNumbers(s, "excel").then((e => a(e))).finally((() => {
                    e.filterPromise = null, e.filtering = !1, this.props.isBusy = !1, this.render()
                }))
            }), 0)
        })), r(".run-whatsapp-filter-cancel").off().on("click", (() => {
            "excel" === e.filterComponent && e.cancelFiltering && e.cancelFiltering()
        })), r(".download-filtered-numbers").off().on("click", (e => u(this.props.recipients.filtered.excel.valids, this.props.recipients.filtered.excel.failures, this.props.recipients.excel_country_code))), o();
        const d = (e = !0) => {
            const s = r("[name=excel-from]"),
                t = r("[name=excel-to]"),
                n = Number(s.val()),
                o = Number(t.val());
            let a = 0;
            if ((isNaN(n) || n > this.props.recipients.excel.count) && (a = 1), (isNaN(o) || o > this.props.recipients.excel.count) && (a = a ? 3 : 2), Number(n) > Number(o) && (a = 3), 1 === a || 3 === a ? s.addClass("has-error") : s.removeClass("has-error"), 2 === a || 3 === a ? t.addClass("has-error") : t.removeClass("has-error"), !a && this.props.recipients.excel.workbook && this.props.recipients.excel.sheet) {
                const s = m(XLSX.utils.sheet_to_json(this.props.recipients.excel.workbook.Sheets[this.props.recipients.excel.sheet], {
                    raw: !1
                }), n, o, this.props.recipients.excel.column);
                this.props.recipients.excel.start = s.start, this.props.recipients.excel.end = s.end, this.props.recipients.excel.count = s.count, console.log("props.contacts : ", s.contacts), this.props.recipients.excel.contacts = s.contacts, e && this.renderSendMessageChooseRecipientsExcelComponent()
            }
        };
        r("[name=excel-from]").val(this.props.recipients.excel.start).off().on("change", d).prop("disabled", !this.isActive()), r("[name=excel-to]").val(this.props.recipients.excel.end).off().on("change", d).prop("disabled", !this.isActive()), r(".stats").html(`Max: ${this.props.recipients.excel.count}&nbsp;&nbsp;Count: ${this.props.recipients.excel.contacts.length}`), d(!1), s.localize(), this.props.sendMessageChooseRecipientsExcelRendered = !0
    }, a.disposeSendMessageChooseRecipientsExcelComponent = function() {
        $(".choose-message-type").find(".excel-list").remove(), this.props.sendMessageChooseRecipientsExcelRendered = !1
    }, a.sendMessageSelectAttachmentsComponent = function() {
        return '\n  '
    }, a.sendMessageSelectAttachmentsThumbComponent = function() {
        return '\n            <div class="thumb">\n                <div class="icon single_image"></div>\n                <div class="name"></div>\n                <div class="icon-bin"></div>\n            </div>\n        '
    }, a.renderSendMessageSelectAttachmentsComponent = function() {
        this.props.sendMessageSelectAttachmentsRendered || this.pageContainer && this.pageContainer.append(this.sendMessageSelectAttachmentsComponent());
        const e = $(".select-attachments"),
            s = e.find.bind(e);
        s("input[name=attachments]").remove(), e.append('<input type="file" name="attachments" multiple style="display: none;">'), s(".icon-paperclip").off().on("click", (e => {
            if (!this.isActive()) return this.renderInactiveSubscriptionComponent();
            s("input[name=attachments]").click()
        })), s("input[name=attachments]").off().on("change", (e => {
            const t = e.target.files || [];
            return t[0].size > 16e6 ? alert(i18next.t("maxAttachmentsizes")) : this.props.attachments.length + t.length > 15 ? alert(i18next.t("maxAttachmentUpload", {
                max: 15
            })) : (s(".message").text(i18next.t("processing")), void Promise.all([...t].map((e => {
                return s = e, new Promise(((e, t) => {
                    const n = new FileReader;
                    n.readAsDataURL(s), n.onload = () => e({
                        name: s.name,
                        data: n.result
                    }), n.onerror = e => t(e)
                }));
                var s
            }))).then((e => {
                this.props.attachments = [...this.props.attachments, ...e], this.renderSendMessageSelectAttachmentsComponent(), s(".message").text("")
            })).catch((e => {
                s(".message").text(i18next.t("attachmentUploadFail"))
            })))
        })), s(".clear-attachments-list").css({
            display: this.props.attachments.length ? "block" : "none"
        }).off().on("click", (e => {
            e.preventDefault();
            window.confirm("Are you sure you want to delete attachments?") && (this.props.attachments = [], this.renderSendMessageSelectAttachmentsComponent())
        })), s(".message").text(""), s(".thumbs").empty(), $(".captionshow").addClass("d-none");
        const t = [...this.props.attachments];
        t.forEach(((e, n) => {
            const o = $(this.sendMessageSelectAttachmentsThumbComponent());
            o.attr("title", e.name), o.find(".name").text(e.name), o.data({
                id: n
            });
            const a = function(e) {
                try {
                    const s = e.data;
                    switch (s.split(";")[0].split(":")[1]) {
                        case "application/pdf":
                            return "pdf";
                        case "application/vnd.ms-excel":
                        case "application/vnd.ms-excel.sheet.macroEnabled.12":
                        case "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                            return "excel";
                        case "application/msword":
                        case "application/vnd.ms-word.document.macroEnabled.12":
                        case "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                            return "word";
                        case "application/vnd.ms-powerpoint":
                        case "application/vnd.ms-powerpoint.presentation.macroEnabled.12":
                        case "application/vnd.openxmlformats-officedocument.presentationml.presentation":
                            return "ppt";
                        case "image/jpeg":
                        case "image/jpg":
                        case "image/png":
                            return "image";
                        case "video/mp4":
                        case "video/quicktime":
                        case "video/avi":
                        case "video/webm":
                            return "video";
                        case "audio/vnd.dlna.adts":
                        case "audio/mpeg":
                        case "audio/x-m4a":
                        case "audio/ogg":
                        case "audio/ogg":
                            return "audio";
                        case "image/gif":
                            return "gif";
                        case "application/x-zip-compressed":
                            return "zip";
                        case "application/vnd.android.package-archive":
                            return "apk";
                        case "text/plain":
                            return "text";
                        default:
                            return "other"
                    }
                } catch (e) {
                    return "other"
                }
            }(e);
            "image" === a ? (o.find(".icon").css({
                backgroundImage: `url(${e.data})`
            }), $(".captionshow").toggleClass("d-none", 0 === t.length)) : "video" === a ? ($(".captionshow").toggleClass("d-none", 0 === t.length), o.addClass(a)) : o.addClass(a), s(".thumbs").append(o)
        })), s(".attachment-count").toggleClass("d-none", 0 === t.length).text(`(${i18next.t("attachmentCount",{count:t.length})})`), s(".thumbs .thumb .icon-bin").off().on("click", (e => {
            event.preventDefault();
            if (!window.confirm("Are you sure you want to remove this attachment?")) return;
            const s = $(e.target).closest(".thumb").data("id");
            this.props.attachments = this.props.attachments.filter(((e, t) => t !== s)), this.renderSendMessageSelectAttachmentsComponent()
        })), e.localize(), this.props.sendMessageSelectAttachmentsRendered = !0
    }, a.disposeSendMessageSelectAttachmentsComponent = function() {
        $(".select-attachments").remove(), this.props.sendMessageSelectAttachmentsRendered = !1
    }, a.sendMessageTextBoxComponent = function() {
        return `\n <div class="message-area">\n  <div class="d-flex">\n  <div style="flex: 1;">\n <div class="d-flex" style="margin-top: 10px">\n <div class="mt-2 h6 section-heading-underline pb-2 d-flex justify-content-between">\n  <span style="padding: 3px;color: #000;font-size: bold;"><i class="icon icon-message fs18 mr3 d-flex d-flex-aic">${i18next.t("msgText")}: &nbsp;&nbsp;&nbsp;&nbsp;</i></span> \n </div>\n<label for="message-as-caption" style="margin-right: 20px; cursor: pointer; font-weight: 500;" class="captionshow text-primary d-none">\n  <input type="checkbox" name="message-as-caption" id="message-as-caption">\n <span data-i18n="caption"></span>\n </label>\n <label for="opt-out" style="margin-right: 20px; cursor: pointer; font-weight: 500;" class="text-primary">\n <input type="checkbox" name="opt-out" id="opt-out">\n                                <span data-i18n="optout"></span>\n                            </label>\n                            <span style="font-weight: bold" class="text-primary open-msg-timing-settings"><i class="icon icon-settings ml5 fs18 vam lh1"></i> Set Delay</span>\n                        </div>\n                        <div class="d-flex">\n                            <div style="border: 1px solid #ccc; border-radius: 4px; position: relative; box-shadow: inset 0 1px 1px rgb(0 0 0 / 8%);"\n                                class="col mr-2 px-0">\n                                <span class="icon-eye mr-3 preview"\n                                    style="position: absolute; top: 2px; right: 2px; cursor: pointer;">\n                                </span>\n                                <textarea name="message" class="form-control pt-3"\n style="min-height: 100px; border: none; max-height: 100px; resize: none;" placeholder="${i18next.t("typeYourMessage")}"></textarea>\n                                <textarea class="position-absolute pt-3 message-preview form-control"\n                                    style="top: 0px; left: 0px; min-height: 100px; border: none; max-height: 100px; resize: none;background-color: #ffffff;" readonly></textarea>\n                                <div class="d-flex justify-content-end">\n  <button class="btn btn-primary mr-1 mb-1 send-now" style="background-color: #82AE30;border-color: transparent;text-align: center;border-radius: 4px; font-size: 16px;"><i class="wa icon-paperplane-filled fs20 lh1 d-flex">${i18next.t("buttons.send")}</i></button>\n  </div>\n                            </div>\n                        </div>\n                        <div class="customization-options">\n                            <span><span data-i18n="customizations"></span>:&nbsp;&nbsp;</span>\n  <span class="list">\n <span class="badge badge-pill badge-primary px-3 py-1"></span>\n                            </span>\n                        </div>\n                    </div>\n  </div>\n  <div class="select-attachments">\n                <div class="mt-1 h6 section-heading-underline pb-2">\n                    <div class="d-flex justify-content-between align-items-center">\n                        <div class="d-flex align-items-center">\n                            <span style="color: #aaa;font-size: small;"><span data-i18n="selectAttachments"></span> : </span>\n                            <span class="icon-paperclip text-secondary d-flex"></span>\n                            <span class="attachment-count">(6 Selected)</span>\n                            <input type="file" name="attachments" multiple style="display: none;">\n                        </div>\n                        <div class="d-flex align-items-center">\n                            <div class="message font-weight-normal"></div>\n                            <a href="#" class="clear-attachments-list mt-1 ml-1">\n                                <i class="icon-bin"></i>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div class="thumbs">\n                                        \n                </div>\n            </div>\n <div class="mt-1 h6 section-heading-underline pb-2 d-flex justify-content-between">                  \n    <a href="#" class="text-primary template-link d-flex justify-content-between">\n        <span class="text-primary" data-i18n="messageTemplates"></span>\n    </a>\n    <i class="text-primary template-link icon-add-template font-weight-bold add-template" data-i18n="addTemplates">Add Templates</i>\n</div>\n<div class="templates">\n        \n</div>\n  </div>\n        `
    }, a.editTemplateComponent = function() {
        return `\n            <div class="edit-template-modal template-modal">\n                <div class="pws-modal d-flex flex-column">\n                    <div class="pws-modal-head position-relative">\n                        <div class="title">${i18next.t("editTemplate")}</div>\n                        <div class="close position-absolute mr-2 mt-2"\n                            style="cursor: pointer; font-weight: 400; top: 0px; right: 0px; font-size: 18px;">x</div>\n                    </div>\n                    <div class="pws-modal-content">\n                        <div class="section-title mb-2">\n                            <span>${i18next.t("templateName")}</span>\n                            <div class="mt-1">\n                                <input type="text" name="name" class="form-control">\n                            </div>\n                        </div>\n                        <div class="section-title mb-2">\n                            <span>${i18next.t("templateContent")}</span>\n                            <div class="mt-1">\n                                <textarea name="text" class="form-control"\n                                    style="resize: none; min-height: 100px; max-height: 100px;"></textarea>\n                            </div>\n                        </div>\n                        <div class="d-flex justify-content-end">\n                            <button class="btn btn-primary save">${i18next.t("saveBtn")}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `
    }, a.templateLinkComponent = function() {
        return '\n            <a href="#" class="template text-primary template-link d-flex justify-content-between">\n                <span></span>\n                <span class="actions">\n                    <i class="icon-message font-weight-bold mr-2"></i>\n                    <i class="icon-edit-2 font-weight-bold mr-2"></i>\n                    <i class="icon-bin-solid font-weight-bold"></i>\n                </span>\n            </a>\n        '
    }, a.renderEditTemplateComponent = function() {
        if (!this.props.selectedTemplate) return;
        this.props.editTemplateRendered || this.pageContainer && this.pageContainer.append(this.editTemplateComponent());
        const s = $(".edit-template-modal"),
            t = s.find.bind(s);
        t(".close").off().on("click", (e => {
            $(e.target).prop("disabled") || this.disposeEditTemplateComponent()
        })), t("[name=name]").val(this.props.selectedTemplate.name), t("[name=text]").val(this.props.selectedTemplate.text), t(".save").off().on("click", (() => {
            const s = [],
                n = t("[name=name]").val().trim(),
                o = t("[name=text]").val().trim();
            if (n && o) {
                for (let t = 0; t < e.templates.length; t++) {
                    const a = e.templates[t];
                    a.name === this.props.selectedTemplate.name ? s.push({
                        name: n,
                        text: o
                    }) : s.push(a)
                }
                t("*").prop("disabled", !0), e.APIHelper.SaveTemplates(s).then((e => {
                    this.disposeEditTemplateComponent()
                })).catch(alert).finally((() => {
                    t("*").prop("disabled", !1)
                }))
            }
        })), s.localize(), this.props.editTemplateRendered = !0
    }, a.disposeEditTemplateComponent = function() {
        $(".edit-template-modal").remove(), this.props.selectedTemplate = null, this.props.editTemplateRendered = !1
    }, a.addTemplateComponent = function() {
        return `\n            <div class="add-template-modal template-modal">\n                <div class="pws-modal d-flex flex-column">\n                    <div class="pws-modal-head position-relative">\n                        <div class="title">${i18next.t("newTemplate")}</div>\n                        <div class="close position-absolute mr-2 mt-2"\n                            style="cursor: pointer; font-weight: 400; top: 0px; right: 0px; font-size: 18px;">x</div>\n                    </div>\n                    <div class="pws-modal-content">\n                        <div class="section-title mb-2">\n                            <span>${i18next.t("templateName")}</span>\n                            <div class="mt-1">\n                                <input type="text" name="name" class="form-control">\n                            </div>\n                        </div>\n                        <div class="section-title mb-2">\n                            <span>${i18next.t("templateContent")}</span>\n                            <div class="mt-1">\n                                <textarea name="text" class="form-control"\n                                    style="resize: none; min-height: 100px; max-height: 100px;"></textarea>\n                            </div>\n                        </div>\n                        <div class="d-flex justify-content-end">\n                            <button class="btn btn-primary save">${i18next.t("saveBtn")}</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `
    }, a.renderAddTemplateComponent = function() {
        this.props.addTemplateRendered || this.pageContainer && this.pageContainer.append(this.addTemplateComponent());
        const s = $(".add-template-modal"),
            t = s.find.bind(s);
        t(".close").off().on("click", (e => {
            $(e.target).prop("disabled") || this.disposeAddTemplateComponent()
        })), t(".save").off().on("click", (() => {
            const s = t("[name=name]").val().trim(),
                n = t("[name=text]").val().trim();
            if (!s || !n) return;
            if (e.templates.filter((e => e.name === s))[0]) return alert("There is a template with this name");
            const o = [...g(e.templates), {
                name: s,
                text: n
            }];
            t("*").prop("disabled", !0), e.APIHelper.SaveTemplates(o).then((e => {
                this.disposeAddTemplateComponent()
            })).catch(alert).finally((() => {
                t("*").prop("disabled", !1)
            }))
        })), s.localize(), this.props.addTemplateRendered = !0
    }, a.disposeAddTemplateComponent = function() {
        $(".add-template-modal").remove(), this.props.addTemplateRendered = !1
    }, a.renderSendMessageTextBoxComponent = function() {
        this.props.sendMessageTextBoxRendered || (this.pageContainer && this.pageContainer.append(this.sendMessageTextBoxComponent()), this.renderSendMessageSelectAttachmentsComponent());
        const t = $(".message-area"),
            n = t.find.bind(t);
        n('textarea[name="message"]').val(this.props.message).off().on("input", (e => {
            this.props.message = e.target.value.trim()
        })), n(".send-now").off().on("click", (() => {
            if (r = !0, this.props.message = this.props.message.trim(), !(this.props.message || this.props.attachments.length > 0)) return alert(i18next.t("errors.messageIsRequired")), this.renderSendMessageTextBoxComponent();
            const t = [];
            if (this.props.isUploadExcelForContactsChecked) {
                this.props.recipients.excel.lastSentSheet = this.props.recipients.excel.sheet;
                let e = [];
                e = this.props.recipients.excel.contacts.filter((function(e) {
                    return -1 == i.indexOf(e.value)
                }));
                for (let t = 0; t < e.length; t++)
                    if (0 === e[t].value.indexOf("55") && 13 != s.id.user.length) {
                        var n = e[t].value.substring(2, 4);
                        e[t].value.length >= 13 && (e[t].value = e[t].value.replace("55" + n + "9", "55" + n))
                    } else if ("55" === this.props.recipients.excel_country_code && 13 != s.id.user.length) {
                    n = e[t].value.substring(0, 2);
                    e[t].value.length >= 11 && (e[t].value = e[t].value.replace(n + "9", n))
                } else 0 === e[t].value.indexOf("54") ? 12 === e[t].value.length && (e[t].value = e[t].value.replace("54", "549")) : "54" === this.props.recipients.excel_country_code && 10 === e[t].value.length && (e[t].value = "9" + e[t].value);
                e.map((e => {
                    t.push({
                        type: "phone",
                        id: this.countryCode(this.props.recipients.excel_country_code) + e.value,
                        entity: {
                            name: this.countryCode(this.props.recipients.excel_country_code) + e.value
                        },
                        message: this.GenerateMessage(e),
                        __rowNum__: e.__rowNum__
                    })
                }))
            } else switch (this.props.sendMessageChooseRecipientsLGBType) {
                case "list":
                    let o = [];
                    o = this.props.recipients.contacts.filter((function(e) {
                        return -1 == i.indexOf(e)
                    }));
                    for (let e = 0; e < o.length; e++)
                        if (0 === o[e].indexOf("55") && 13 != s.id.user.length) {
                            n = o[e].substring(2, 4);
                            o[e].length >= 13 && (o[e] = o[e].replace("55" + n + "9", "55" + n))
                        } else if ("55" === this.props.recipients.list_country_code && 13 != s.id.user.length) {
                        n = o[e].substring(0, 2);
                        o[e].length >= 11 && (o[e] = o[e].replace(n + "9", n))
                    } else 0 === o[e].indexOf("54") ? 12 === o[e].length && (o[e] = o[e].replace("54", "549")) : "54" === this.props.recipients.list_country_code && 10 === o[e].length && (o[e] = "9" + o[e]);
                    o.map((e => {
                        t.push({
                            type: "phone",
                            id: this.countryCode(this.props.recipients.list_country_code) + e,
                            entity: {
                                name: this.countryCode(this.props.recipients.list_country_code) + e
                            },
                            message: this.GenerateMessage()
                        })
                    }));
                    break;
                case "groups":
                    this.props.recipients.groups.map((s => {
                        t.push({
                            type: "group",
                            id: s,
                            entity: e.groups.filter((e => e.id === s))[0],
                            message: this.GenerateMessage()
                        })
                    }));
                    break;
                case "broadcasts":
                    this.props.recipients.broadcasts.map((s => {
                        t.push({
                            type: "broadcast",
                            id: s,
                            entity: e.broadcasts.filter((e => e.id === s))[0],
                            message: this.GenerateMessage()
                        })
                    }));
                    break;
                case "labels":
                    this.props.recipients.labels.map((e => {
                        x.filter((e => e.labels.length > 0)).filter((s => s.labels.find((s => s == e)))).map((e => ({
                            Phone: e.id
                        }))).map((e => {
                            t.push({
                                type: "phone",
                                id: e.Phone,
                                entity: {
                                    name: e.Phone
                                },
                                message: this.GenerateMessage()
                            })
                        }))
                    }))
            }
            if (!t.length) return alert(i18next.t("errors.recipientIsRequired"));
            this.props.attachments.length <= 0 && (this.props.messageAsCaption = !1), e.ProcessTask(this.props.message, t, this.props.attachments, {
                isTimeDelayBetweenMessagesEnabled: this.props.isTimeDelayBetweenMessagesEnabled,
                isBatchMessagingEnabled: this.props.isBatchMessagingEnabled,
                messageDelay: this.props.messageDelay,
                batchNo: this.props.batchNo,
                batchDelay: this.props.batchDelay,
                randomizeMessageDelay: this.props.randomizeMessageDelay
            }, this.props.messageAsCaption), this.props.isBusy = !0, this.props.page = "reports", this.render()
        })), n("input[name=opt-out]").off().on("change", (e => {
            this.props.addOptOutMessage = $(e.target).prop("checked"), this.renderSendMessageTextBoxComponent()
        })).prop("checked", this.props.addOptOutMessage), n('input[name="message-as-caption"]').off().on("change", (e => {
            this.props.messageAsCaption = $(e.target).prop("checked")
        })).prop("checked", this.props.messageAsCaption), chrome.storage.local.get(["TIMELAST"], (function(e) {
            void 0 === e.TIMELAST ? (chrome.storage.local.set({
                TIMELAST: !1
            }, (function() {})), $("#add-time-at-last").prop("checked", !1)) : e.TIMELAST ? $("#add-time-at-last").prop("checked", !0) : $("#add-time-at-last").prop("checked", !1)
        })), n('input[name="add-time-at-last"]').off().on("change", (e => {
            this.props.timeAtLast = $(e.target).prop("checked"), chrome.storage.local.set({
                TIMELAST: $(e.target).prop("checked")
            }, (function() {}))
        })).prop("checked", this.props.timeAtLast), n(".open-msg-timing-settings").off().on("click", (e => {
            this.props.isMessageTimerSettingsOpen = !0, this.renderSendMessageComponent()
        })), n(".preview").off().on("click", (e => {
            this.props.isMessagePreviewOn = !this.props.isMessagePreviewOn, this.renderSendMessageTextBoxComponent()
        })).css({
            zIndex: 1
        }).toggleClass("icon-eye", !this.props.isMessagePreviewOn).toggleClass("icon-eye-off", this.props.isMessagePreviewOn);
        const o = g(this.props.recipients.excel.contacts[0]),
            p = a.GenerateMessage(o);
        if (n(".message-preview").val(p).css({
                display: this.props.isMessagePreviewOn ? "initial" : "none"
            }), n(".templates").empty(), e.templates.forEach((e => {
                const s = $(this.templateLinkComponent());
                s.find("span:first-child").text(e.name), s.data("name", e.name).attr("title", e.name), n(".templates").append(s)
            })), 0 === e.templates.length && n(".templates").append('<p class="no-template" data-i18n="noTemplates">No template</p>'), n(".templates a .actions i.icon-message").off().on("click", (s => {
                if (!this.isActive()) return this.renderInactiveSubscriptionComponent();
                const t = $(s.target).closest("a").data("name"),
                    n = e.templates.filter((e => e.name === t))[0];
                n && (this.props.message = n.text, this.renderSendMessageTextBoxComponent())
            })), n(".templates a .actions i.icon-edit-2").off().on("click", (s => {
                const t = $(s.target).closest("a").data("name"),
                    n = e.templates.filter((e => e.name === t))[0];
                n && (this.props.selectedTemplate = n, this.renderEditTemplateComponent())
            })), n(".templates a .actions i.icon-bin-solid").off().on("click", (s => {
                if (!window.confirm("Are you sure you want to delete template?")) return;
                const t = $(s.target).closest("a").data("name"),
                    n = e.templates.filter((e => e.name !== t));
                e.APIHelper.SaveTemplates(n)
            })), n(".add-template").off().on("click", (() => {
                this.renderAddTemplateComponent()
            })), this.props.isUploadExcelForContactsChecked && this.props.recipients.excel.columns.length > 0) {
            $(".customization-options").css({
                display: "block"
            });
            const e = $(".customization-options .list");
            e.empty(), this.props.recipients.excel.columns.forEach((s => {
                e.append(`<span class="badge badge-pill badge-primary px-3 py-1 mr-2" style="cursor: pointer;" data-col-name="${s}">${s}</span>`)
            })), e.find("span").off().on("click", (e => {
                if (!this.isActive()) return this.renderInactiveSubscriptionComponent();
                const s = $('.message-area textarea[name="message"]'),
                    t = $(e.target).data("colName");
                ! function(e, s) {
                    if (document.selection) {
                        e.focus(), document.selection.createRange().text = s
                    } else if (e.selectionStart || "0" == e.selectionStart) {
                        var t = e.selectionStart,
                            n = e.selectionEnd;
                        e.value = e.value.substring(0, t) + s + e.value.substring(n, e.value.length), e.selectionStart = t + s.length, e.selectionEnd = t + s.length
                    } else e.value += s
                }(s.get(0), `{{${t}}}`), s.trigger("input"), this.renderSendMessageTextBoxComponent()
            }))
        } else $(".customization-options").css({
            display: "none"
        });
        t.localize(), this.props.sendMessageTextBoxRendered = !0
    }, a.disposeSendMessageTextBoxComponent = function() {
        $(".message-area").remove(), this.props.sendMessageTextBoxRendered = !1
    }, a.sendMessageTimerSettingsComponent = function() {
        return '\n            <div class="message-timing-settings">\n                <div class="timer-modal d-flex flex-column">\n                    <div class="timer-modal-head position-relative">\n                        <div class="title" data-i18n="timeDelayNBatching.title"></div>\n                        <div class="close position-absolute mr-2 mt-2" style="cursor: pointer; font-weight: 400; top: 0px; right: 0px; font-size: 18px;">x</div>\n                    </div>\n                    <div class="timer-modal-content">\n                        <div class="time-delay pb-2" style="border-bottom: 2px solid #999999;">\n                            <div class="section-title mb-1">\n                                <div class="d-flex justify-content-between">\n                                    <span data-i18n="timeDelayNBatching.setMessageDelay"></span>\n                                    <label class="switch">\n                                        <input type="checkbox">\n                                        <span class="slider round"></span>\n                                    </label>\n                                </div>\n                            </div>\n                            <div class="d-flex">\n                                <div>\n                                    <span>\n                                        <input type="text" name="time-delay" style="width: 50px;">\n                                    </span>\n                                    <span>\n                                        <span data-i18n="timeDelayNBatching.seconds"></span> (\n                                        <label for="randomize-timer-delay" style="cursor: pointer;">\n                                            <input type="checkbox" name="randomize-timer-delay" id="randomize-timer-delay">\n                                            <span data-i18n="timeDelayNBatching.randomize"></span>\n                                        </label>\n                                        )\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                        <div class="batch-settings mt-2">\n                            <div class="section-title mb-1">\n                                <div class="d-flex justify-content-between">\n                                    <span data-i18n="timeDelayNBatching.setBatchDelay"></span>\n                                    <label class="switch">\n                                        <input type="checkbox">\n                                        <span class="slider round"></span>\n                                    </label>\n                                </div>\n                            </div>\n                            <div>\n                                <div>\n                                    <span>\n                                        <span data-i18n="timeDelayNBatching.sendInBatchOf"></span>\n                                        <span>\n                                            <input type="text" name="message-batch-no" style="width: 50px;">\n                                        </span>\n                                        <span data-i18n="timeDelayNBatching.messages"></span>\n                                    </span>\n                                </div>\n                                <div class="mt-2">\n                                    <span>\n                                        <span data-i18n="timeDelayNBatching.timeGap"></span>\n                                        <span>\n                                            <input type="text" name="message-batch-gap" style="width: 50px;">\n                                        </span>\n                                        <span data-i18n="timeDelayNBatching.minutes"></span>\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        '
    }, a.renderSendMessageTimerSettingsComponent = function() {
        if (!this.isActive()) return this.renderInactiveSubscriptionComponent();
        this.props.sendMessageTimerSettingsRendered || this.pageContainer && this.pageContainer.append(this.sendMessageTimerSettingsComponent());
        const e = $(".message-timing-settings"),
            s = e.find.bind(e);
        s(".close").off().on("click", (() => {
            this.props.isMessageTimerSettingsOpen = !1, this.renderSendMessageComponent()
        })), s(".time-delay .switch input[type=checkbox]").off().on("change", (e => {
            this.props.isTimeDelayBetweenMessagesEnabled = $(e.target).prop("checked"), this.renderSendMessageTimerSettingsComponent()
        })).prop("checked", this.props.isTimeDelayBetweenMessagesEnabled), s(".batch-settings .switch input[type=checkbox]").off().on("change", (e => {
            this.props.isBatchMessagingEnabled = $(e.target).prop("checked"), this.renderSendMessageTimerSettingsComponent()
        })).prop("checked", this.props.isBatchMessagingEnabled);
        const t = (e, s) => {
            const t = $(e.target),
                n = t.val().trim();
            isNaN(n) ? t.addClass("has-error") : (t.removeClass("has-error"), this.props[s] = Number(n))
        };
        s("[name=time-delay]").off().on("change", (e => {
            t(e, "messageDelay")
        })).val(this.props.messageDelay).prop("disabled", !this.props.isTimeDelayBetweenMessagesEnabled), s("[name=randomize-timer-delay]").off().on("change", (e => {
            this.props.randomizeMessageDelay = $(e.target).prop("checked")
        })).prop("checked", this.props.randomizeMessageDelay).prop("disabled", !this.props.isTimeDelayBetweenMessagesEnabled), s("[name=message-batch-no]").off().on("change", (e => {
            t(e, "batchNo")
        })).val(this.props.batchNo).prop("disabled", !this.props.isBatchMessagingEnabled), s("[name=message-batch-gap]").off().on("change", (e => {
            t(e, "batchDelay")
        })).val(this.props.batchDelay).prop("disabled", !this.props.isBatchMessagingEnabled), e.localize(), this.props.sendMessageTimerSettingsRendered = !0
    }, a.disposeSendMessageTimerSettingsComponent = function() {
        $(".message-timing-settings").remove(), this.props.sendMessageTimerSettingsRendered = !1
    }, a.renderSendMessageComponent = function() {
        this.props.messagePageRendered || (this.renderHeaderTemplate(), this.renderNavLinks(), this.renderPageContainer(), this.renderFooterTemplate()), this.renderSendMessageChooseRecipientsComponent(), this.renderSendMessageSelectAttachmentsComponent(), this.renderSendMessageTextBoxComponent(), this.props.isMessageTimerSettingsOpen ? this.renderSendMessageTimerSettingsComponent() : this.disposeSendMessageTimerSettingsComponent(), this.props.messagePageRendered = !0
    }, a.disposeSendMessageComponent = function() {
        this.disposeSendMessageChooseRecipientsComponent(), this.disposeSendMessageSelectAttachmentsComponent(), this.disposeSendMessageTextBoxComponent(), this.props.isMessageTimerSettingsOpen = !1, this.disposeSendMessageTimerSettingsComponent(), this.props.messagePageRendered = !1
    }, a.timeouts = {
        nextMessageInterval: void 0
    }, a.reportsIndividualTableComponent = function() {
        return '\n            <div class="reports-individual">\n                <h6 class="mt-2">Message Reports</h6>\n                <div class="control-center mt-0 mb-1">\n                    <div class="time-before-next text-center">Next in 9 seconds</div>\n                    <progress class="w-100 mt-2" value="2" max="4"></progress>\n                    <div class="d-flex justify-content-between position-relative">\n                        <span class="done">2</span>\n                        <div class="controls d-flex">\n                            <span class="mr-3 pause" style="display: flex;cursor: pointer;font-size: 26px;align-items: center;color:#EB9605;">\n                                <i class="icon-pause mr-1 d-flex"></i>\n                                <span style="font-size: 16px;" data-i18n="reports.pauseSending"></span>\n                            </span>\n                            <span class="mr-3 continue" style="display: flex;cursor: pointer;font-size: 26px;align-items: center;color: #28a745;">\n                                <i class="icon-play mr-1 d-flex"></i>\n                                <span style="font-size: 16px;" data-i18n="reports.resumeSending"></span>\n                            </span>\n                            <span class="text-danger stop" style="display: flex;cursor: pointer;font-size: 26px;align-items: center;">\n                                <i class="icon-stop mr-1 d-flex"></i>\n                                <span style="font-size: 16px;" data-i18n="reports.stopSending"></span>\n                            </span>\n                        </div>\n                        <span class="total">4</span>\n                    </div>\n                </div>\n                <div class="table-responsive">\n                    <table class="table table-bordered mt-2">\n                        <thead>\n                            <tr>\n                                <th class="text-center" scope="col" data-i18n="reports.startCol"></th>\n                                <th class="text-center" scope="col" data-i18n="reports.messageCol"></th>\n                                <th class="text-center" scope="col"><span class="font-new icon-paperclip"></span></th>\n                                <th class="text-center" scope="col">\n                                    <span class="text-warning" data-i18n="reports.Pending"></span>\n                                </th>\n                                <th class="text-center" scope="col">\n                                    <span class="text-danger" data-i18n="reports.failed"></span>\n                                </th>\n                                <th class="text-center" scope="col">\n                                    <span class="text-success" data-i18n="reports.sent"></span>\n                                </th>\n                                <th class="text-center" scope="col">\n                                    <span data-i18n="reports.total"></span>\n                                </th>\n                                <th scope="col">\n                                    Report\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            \n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        '
    };
    var r = !1;

    function p(s, t, n = []) {
        s = $(s), console.log("groups BP.groups : ", e.groups), console.log("groups holder : ", n), console.log("groups changeHandler : ", t);
        const o = [...e.groups].filter((e => e.name));
        o.length < 1 ? s.html(`<option>${i18next.t("selectGroup")}</option>`) : (s.empty(), s.prop("multiple", !0), o.forEach((e => {
            console.log("foreach loop : ", e), console.log("holder includes : ", n.find((s => s == e.id))), s.append(`<option value="${e.id}" ${n.find((s=>s==e.id))?"selected":""}>${e.name}</option>`)
        })));
        const a = s.off().on("change", t).get(0);
        new lc_select(a, {
            pre_placeh_opt: !0
        });
        const i = new Event("lc-select-refresh");
        a.dispatchEvent(i)
    }

    function l(s, t, n = []) {
        s = $(s), console.log("BP.labels : ", e.labels), console.log("holder : ", n), console.log("changeHandler : ", t), null === n && (n = []);
        const o = [...e.labels].filter((e => e.name));
        o.length < 1 ? s.html(`<option>${i18next.t("selectLabel")}</option>`) : (s.empty(), s.prop("multiple", !0), o.forEach((e => {
            s.append(`<option value="${e.id}" ${n.find((s=>s==e.id))?"selected":""}>${e.name}</option>`)
        })));
        const a = s.off().on("change", t).get(0);
        new lc_select(a, {
            pre_placeh_opt: !0
        });
        const i = new Event("lc-select-refresh");
        a.dispatchEvent(i)
    }

    function c(s, t, n = []) {
        s = $(s);
        const o = [...e.broadcasts];
        o.length < 1 ? s.html(`<option>${i18next.t("selectBroadcast")}</option>`) : (s.empty(), s.prop("multiple", !0), o.forEach((e => {
            s.append(`<option value="${e.id}" ${n.includes(e.id)?"selected":""}>${e.name}</option>`)
        })));
        const a = s.off().on("change", t).get(0);
        new lc_select(a, {
            pre_placeh_opt: !0
        });
        const i = new Event("lc-select-refresh");
        a.dispatchEvent(i)
    }

    function d(e, s) {
        return 0 !== libphonenumber.findNumbers(`+${"00"===s?"":s}${e}`).length
    }

    function h(e, s) {
        let t = {
            updatedNumber: e,
            isValid: !0
        };
        return d(e, s) || (t.isValid = !1), t
    }

    function m(e, s, t, n) {
        const o = e.length;
        t = t && t > 0 && t <= o ? t : o, s = s && s > 0 && s <= t ? s : o > 0 ? 1 : 0;
        const i = Object.keys(e[0] || {}),
            r = [],
            p = e.filter((e => e.__rowNum__ >= s && e.__rowNum__ <= t));
        let l = "";
        return p.forEach(((e, s) => {
            const t = i[n || 0],
                o = String(e[t]);
            if (h = (h = (h = o) ? h.replace(/\s/g, "") : h).trim().split("").filter((e => e && " " !== e && !isNaN(e))).join("").trim(), l = !isNaN(h) && h) {
                const s = function(e, s) {
                    return "00" !== s && s === e.substring(0, s.length) ? e.substring(s.length) : e
                }(l, a.props.recipients.excel_country_code);
                if (d(s, a.props.recipients.excel_country_code)) {
                    var p = "0" === s.slice(0, 1) ? s.replace("0", "") : s;
                    r.push({
                        value: p,
                        __rowNum__: e.__rowNum__
                    })
                } else {
                    var c = "0" === l.slice(0, 1) ? l.replace("0", "") : l;
                    r.push({
                        value: c,
                        __rowNum__: e.__rowNum__
                    })
                }
            }
            var h
        })), {
            start: s,
            end: t,
            count: o,
            columns: i,
            contacts: r
        }
    }

    function u(e, s, t) {
        const n = !(!Array.isArray(e) || !e[0] || void 0 === e[0].__rowNum__) || (!(!Array.isArray(s) || !s[0] || void 0 === s[0].__rowNum__) || Array.isArray(s) && s[0] && void 0 !== s[0].__rowNum__);
        var o = [],
            i = 0;
        if (n && a.props.recipients.excel.sheets.includes(a.props.recipients.excel.lastFilteredSheet)) try {
            XLSX.utils.sheet_to_json(a.props.recipients.excel.workbook.Sheets[a.props.recipients.excel.lastFilteredSheet], {
                raw: !1
            }).forEach((e => {
                i = e.__rowNum__, o[e.__rowNum__] = e
            }))
        } catch (e) {}
        var r = XLSX.utils.book_new();
        r.Props = {
            Title: "WA Biz WhatsApp Bulk Sender",
            Subject: "Filtered Numbers",
            Author: "WA Biz WhatsApp Bulk Sender",
            CreatedDate: new Date
        }, r.SheetNames.push("Found"), r.SheetNames.push("Not Found"), r.SheetNames.push("Pending");
        var p = {},
            l = [];

        function c(e) {
            return e.split(" ").map((function(e) {
                return e.charAt(0).toUpperCase() + e.slice(1)
            })).join(" ")
        }
        o.length > 0 && o[i] && (l = Object.keys(o[i]).filter((e => "__rowNum__" !== e))).forEach((e => p[c(e)] = "")), p = Object.assign({}, p, {
            Number: ""
        });
        var d = e => {
            if (!e) return p;
            const s = { ...p,
                Number: e.value || ""
            };
            return e.__rowNum__ && o[e.__rowNum__] ? (l.forEach((t => s[c(t)] = o[e.__rowNum__][t])), s) : s
        };
        e.length < 1 ? e.push(d()) : e = e.map((e => d(e))), s.length < 1 ? s.push(d()) : s = s.map((e => d(e))), t.length < 1 ? t.push(d()) : t = t.map((e => d(e))), r.Sheets.Found = XLSX.utils.json_to_sheet(e), r.Sheets["Not Found"] = XLSX.utils.json_to_sheet(s), r.Sheets.Pending = XLSX.utils.json_to_sheet(t);
        var h = XLSX.write(r, {
            bookType: "xlsx",
            type: "binary"
        });
        saveAs(new Blob([function(e) {
            for (var s = new ArrayBuffer(e.length), t = new Uint8Array(s), n = 0; n < e.length; n++) t[n] = 255 & e.charCodeAt(n);
            return s
        }(h)], {
            type: "application/octet-stream"
        }), "test.xlsx")
    }

    function g(e) {
        if (void 0 === e) return null;
        if (null === e || "object" != typeof e) return e;
        if (e && e.constructor === Array) {
            const s = [];
            for (let t of e) s.push(g(t));
            return s
        }
        if (e.constructor === Date || e.constructor === RegExp || e.constructor === Function || e.constructor === String || e.constructor === Number || e.constructor === Boolean) return new e.constructor(e);
        if (e.constructor === Object) {
            const s = {};
            for (let t in e) {
                let n = e[t];
                s[t] = g(n)
            }
            return s
        }
        return e
    }
    a.renderReportsIndividualTableComponent = function() {
        this.props.reportsIndividualRendered || this.pageContainer && this.pageContainer.append(this.reportsIndividualTableComponent());
        const s = $(".reports-individual"),
            t = s.find.bind(s),
            n = g(this.props.reports.individual);
        if (clearInterval(this.timeouts.nextMessageInterval), n.length) {
            const s = n.filter((e => "Success" === e.status)),
                d = n.filter((e => "Failed" === e.status || "Cancelled" === e.status)),
                h = n.filter((e => "Success" !== e.status && "Failed" !== e.status && "Cancelled" !== e.status)),
                m = n.filter((e => e.next))[0],
                u = s.length,
                g = d.length,
                f = n.length,
                x = !(f - u - g);
            if (t("progress").toggleClass("d-none", x).attr("value", u + g).attr("max", f), t(".done").toggleClass("d-none", x).text(u + g), t(".total").toggleClass("d-none", x).text(f), t(".pause").toggleClass("d-none", e.taskPaused || x).off().on("click", (s => e.pauseTask && e.pauseTask())), t(".continue").toggleClass("d-none", !e.taskPaused || x).off().on("click", (s => e.continueTask && e.continueTask())), t(".stop").toggleClass("d-none", x).off().on("click", (s => window.confirm("You want to cancel all unsent messages?") && e.cancelTask && e.cancelTask())), x && a.props.profile && "Y" === a.props.profile.get && r) {
                r = !1;
                var o = f,
                    i = u,
                    p = g,
                    l = Date.now();
                e.APIHelper.Savedata(o, i, p, l)
            }
            if ($(".time-before-next").toggleClass("d-none", !m), m) {
                function c() {
                    const e = Math.ceil((m.next - Date.now()) / 1e3);
                    e <= 0 ? $(".time-before-next").text(i18next.t("reports.sending")) : $(".time-before-next").text(i18next.t("reports.timeToNext", {
                        time: e
                    }))
                }
                c(), this.timeouts.nextMessageInterval = setInterval(c, 1e3)
            }
            $(".final-stats").toggleClass("d-none", !x), $(".final-stats").find(".text-dark").text(`${i18next.t("reports.total")}: ${f}`), $(".final-stats").find(".text-primary").text(`${i18next.t("reports.sent")}: ${u}`), $(".final-stats").find(".text-danger").text(`${i18next.t("reports.failed")}: ${g}`);
            const v = $(`\n                <tr title="${n[0].text}">\n                    <td>${String(n[0].timestamp.getDate()).padStart(2,"0")}-${String(n[0].timestamp.getMonth()+1).padStart(2,"0")}-${n[0].timestamp.getFullYear()} ${String(n[0].timestamp.getHours()).padStart(2,"0")}:${String(n[0].timestamp.getMinutes()).padStart(2,"0")}</td>\n                    <td class="message">${n[0].text?n[0].text:`<i>${i18next.t("reports.attachmentsOnly")}</i>`}</td>\n                    <td class="text-center">${n[0].attachments?n[0].attachments.length:0}</td>\n                    <td class="text-center">\n                        <span class="text-warning">${f-u-g}</span>\n                    </td>\n                    <td class="text-center">\n                        <span class="text-danger">${g}</span>\n                    </td>\n                    <td class="text-center">\n                        <span class="text-success">${u}</span>\n                    </td>\n                    <td class="text-center">\n                        <span>${f}</span>\n                    </td>\n                    <td class="text-center" title="Click here to Download the Report">\n                        <a href="#" class="text-primary download-reports">\n                            <i class="icon-download mr-1"></i>\n                        </a>\n                    </td>\n                </tr>\n            `);
            t("table tbody").empty().append(v), t(".download-reports").off().on("click", (e => {
                if (e.preventDefault(), !this.isActive()) return this.renderInactiveSubscriptionComponent();
                ! function(e, s, t) {
                    const n = !(!Array.isArray(e) || !e[0] || void 0 === e[0].__rowNum__) || Array.isArray(s) && s[0] && void 0 !== s[0].__rowNum__;
                    var o = [],
                        i = 0;
                    if (n && a.props.recipients.excel.sheets.includes(a.props.recipients.excel.lastSentSheet)) try {
                        XLSX.utils.sheet_to_json(a.props.recipients.excel.workbook.Sheets[a.props.recipients.excel.lastSentSheet], {
                            raw: !1
                        }).forEach((e => {
                            i = e.__rowNum__, o[e.__rowNum__] = e
                        }))
                    } catch (e) {}
                    var r = XLSX.utils.book_new();
                    r.Props = {
                        Title: "WA Biz WhatsApp Bulk Sender",
                        Subject: "Report",
                        Author: "WA Biz WhatsApp Bulk Sender",
                        CreatedDate: new Date
                    }, r.SheetNames.push("Sent"), r.SheetNames.push("Failed"), r.SheetNames.push("Pending");
                    var p = {},
                        l = [];

                    function c(e) {
                        function s(e) {
                            return e.charAt(0).toUpperCase() + e.slice(1)
                        }
                        return e.split(" ").map(s).join(" ")
                    }
                    o.length > 0 && o[i] && (l = Object.keys(o[i]).filter((e => "__rowNum__" !== e))).forEach((e => p[c(e)] = ""));
                    p = Object.assign({}, p, {
                        Recipient: "",
                        Text: "",
                        Attachments: ""
                    });
                    var d = e => {
                        if (!e) return p;
                        const s = { ...p,
                            Recipient: e.recipientName || "",
                            Message: e.text || "",
                            Attachments: (e.attachments || []).length
                        };
                        return e.__rowNum__ && o[e.__rowNum__] ? (l.forEach((t => s[c(t)] = o[e.__rowNum__][t])), s) : s
                    };
                    e.length < 1 ? e.push(d()) : e = e.map((e => d(e)));
                    s.length < 1 ? s.push(d()) : s = s.map((e => d(e)));
                    t.length < 1 ? t.push(d()) : t = t.map((e => d(e)));
                    var h = XLSX.utils.json_to_sheet(e),
                        m = XLSX.utils.json_to_sheet(s),
                        u = XLSX.utils.json_to_sheet(t);
                    r.Sheets.Sent = h, r.Sheets.Failed = m, r.Sheets.Pending = u;
                    var g = XLSX.write(r, {
                        bookType: "xlsx",
                        type: "binary"
                    });

                    function f(e) {
                        for (var s = new ArrayBuffer(e.length), t = new Uint8Array(s), n = 0; n < e.length; n++) t[n] = 255 & e.charCodeAt(n);
                        return s
                    }
                    saveAs(new Blob([f(g)], {
                        type: "application/octet-stream"
                    }), `Report-${Date.now()}.xlsx`)
                }(s, d, h)
            })).closest(".position-absolute").css({
                right: x ? "0px" : "15px"
            })
        } else {
            const e = $('\n                <tr>\n                    <td colspan="8" class="text-center">\n                        No reports to display\n                    </td>\n                </tr>\n            ');
            t("table tbody").empty().append(e)
        }
        t(".control-center").toggleClass("d-none", !n.length), s.localize(), this.props.reportsIndividualRendered = !0
    }, a.disposeReportsIndividualTableComponent = function() {
        $(".reports-individual").remove(), this.props.reportsIndividualRendered = !1
    }, a.filterReportsTableComponent = function() {
        return '\n            <div class="filter-reports">\n                <h6 class="mt-2">Filter Reports</h6>\n                <div class="control-center mt-0 mb-1">\n                    <progress class="w-100 mt-2" value="2" max="4"></progress>\n                    <div class="d-flex justify-content-between position-relative">\n                        <span class="done">2</span>\n                        <div class="controls d-flex">\n                            <span class="mr-3 pause" style="display: flex;cursor: pointer;font-size: 26px;align-items: center;color:#EB9605;">\n                                <i class="icon-pause mr-1 d-flex"></i>\n                                <span style="font-size: 16px;" data-i18n="reports.pauseSending"></span>\n                            </span>\n                            <span class="mr-3 continue" style="display: flex;cursor: pointer;font-size: 26px;align-items: center;color: #28a745;">\n                                <i class="icon-play mr-1 d-flex"></i>\n                                <span style="font-size: 16px;" data-i18n="reports.resumeSending"></span>\n                            </span>\n                            <span class="text-danger stop" style="display: flex;cursor: pointer;font-size: 26px;align-items: center;">\n                                <i class="icon-stop mr-1 d-flex"></i>\n                                <span style="font-size: 16px;" data-i18n="reports.stopSending"></span>\n                            </span>\n                        </div>\n                        <span class="total">4</span>\n                    </div>\n                </div>\n                <div class="table-responsive">\n                    <table class="table table-bordered mt-2">\n                        <thead>\n                            <tr>\n                                <th class="text-center" scope="col" data-i18n="reports.startCol"></th>\n                                <th class="text-center" scope="col" data-i18n="reports.toFilter"></th>\n                                <th class="text-center" scope="col">\n                                    <span class="text-danger" data-i18n="reports.invalid"></span>\n                                </th>\n                                <th class="text-center" scope="col">\n                                    <span class="text-success" data-i18n="reports.valid"></span>\n                                </th>\n                                <th class="text-center" scope="col">\n                                    <span data-i18n="reports.total"></span>\n                                </th>\n                                <th scope="col">\n                                    Report\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            \n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        '
    }, a.renderFilterReportsTableComponent = function() {
        this.props.filterReportsRendered || this.pageContainer && this.pageContainer.append(this.filterReportsTableComponent());
        const s = $(".filter-reports"),
            t = s.find.bind(s),
            n = g(this.props.filterContacts);
        if (n.length) {
            const s = this.props.filterValids,
                o = this.props.filterInvalids,
                a = n.length,
                i = s.length,
                r = o.length,
                p = i + r,
                l = !(a - p && e.filterPromise);
            t("progress").toggleClass("d-none", l).attr("value", p).attr("max", a), t(".done").toggleClass("d-none", l).text(p), t(".total").toggleClass("d-none", l).text(a), t(".pause").toggleClass("d-none", this.props.filterPaused || l).off().on("click", (s => e.pauseFiltering && e.pauseFiltering())), t(".continue").toggleClass("d-none", !this.props.filterPaused || l).off().on("click", (s => e.continueFiltering && e.continueFiltering())), t(".stop").toggleClass("d-none", l).off().on("click", (s => window.confirm("You want to cancel filter task?") && e.cancelFiltering && e.cancelFiltering()));
            const c = $(`\n                <tr>\n                    <td>${String(this.props.filterStarttime.getDate()).padStart(2,"0")}-${String(this.props.filterStarttime.getMonth()+1).padStart(2,"0")}-${this.props.filterStarttime.getFullYear()} ${String(this.props.filterStarttime.getHours()).padStart(2,"0")}:${String(this.props.filterStarttime.getMinutes()).padStart(2,"0")}</td>\n                    <td class="text-center">${a}</td>\n                    <td class="text-center">\n                        <span class="text-danger">${r}</span>\n                    </td>\n                    <td class="text-center">\n                        <span class="text-success">${i}</span>\n                    </td>\n                    <td class="text-center">${p}</td>\n                    <td class="text-center" title="Click here to Download the Report">\n                        <a href="#" class="text-primary download-reports">\n                            <i class="icon-download mr-1"></i>\n                        </a>\n                    </td>\n                </tr>\n            `);
            t("table tbody").empty().append(c), t(".download-reports").off().on("click", (e => {
                if (e.preventDefault(), !this.isActive()) return this.renderInactiveSubscriptionComponent();
                u(this.props.filterValids, this.props.filterInvalids, this.props.filterPendings, this.props.filterCountryCode)
            })).closest(".position-absolute").css({
                right: l ? "0px" : "15px"
            })
        } else {
            const e = $('\n                <tr>\n                    <td colspan="6" class="text-center">\n                        No reports to display\n                    </td>\n                </tr>\n            ');
            t("table tbody").empty().append(e)
        }
        t(".control-center").toggleClass("d-none", !n.length), s.localize(), this.props.filterReportsRendered = !0
    }, a.disposeFilterReportsTableComponent = function() {
        $(".filter-reports").remove(), this.props.filterReportsRendered = !1
    }, a.renderReportsComponent = function() {
        this.props.reportsRendered || (this.renderHeaderTemplate(), this.renderNavLinks(), this.renderPageContainer(), this.renderFooterTemplate()), this.renderReportsIndividualTableComponent(), this.renderFilterReportsTableComponent(), this.props.reportsRendered = !0
    }, a.disposeReportsComponent = function() {
        this.disposeReportsIndividualTableComponent(), this.disposeFilterReportsTableComponent(), this.props.reportsRendered = !1
    }, a.exportPageComponent = function() {
        return '\n            <div class="contacts-export" style="height: 317px;">\n                <div class="banner">\n                    <img src="img/Excel_download.png" width="80">\n                    <span class="onlywhite" data-i18n="export.title"></span>\n                </div>\n                <div class="actions p-3 d-flex flex-column justify-content-between">\n                    <div>                        \n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" checked="" id="exportAllChats">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-message"></i>\n                                <span data-i18n="export.allChatContacts"></span>\n                            </span>\n                        </label>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" checked="" id="exportAllContacts">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="icon-phonebook d-flex mr-1"></i>\n                                <span data-i18n="export.allContacts"></span>\n                            </span>\n                        </label>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" id="exportAllUnsaved">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-message"></i>\n                                <span data-i18n="export.allUnSavedContacts"></span>\n                            </span>\n                        </label>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" id="exportAllArchived">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-download"></i>\n                                <span data-i18n="export.archivedChats"></span>\n                            </span>\n                        </label>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" checked="" id="exportGroups">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-users"></i>\n                                <span data-i18n="export.groupContacts"></span>\n                            </span>\n                        </label>\n                        <div class="form-group input-group mb-0 pl-4 pt-1 pb-2">\n                            <select name="groups" class="w-100">\n\n                            </select>\n                        </div>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" id="exportLabels">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-tag"></i> \n                                <span data-i18n="export.labels"></span>\n                            </span>\n                        </label>\n                        <div class="form-group input-group mb-0 pl-4 pt-1 pb-2">\n                            <select name="labels" class="w-100">\n\n                            </select>\n                        </div>                        \n                        <label class="mb-1 d-flex align-items-center" style="display:none !important;" >\n                            <input type="checkbox" value="" id="exportBroadcasts">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-megaphone"></i> \n                                <span data-i18n="export.broadcasts"></span>\n                            </span>\n                        </label>\n                        <div class="form-group input-group mb-0 pl-4 pt-1 pb-2" style="display:none !important;">\n                            <select name="broadcasts" class="w-100">\n\n                            </select>\n                        </div>\n                    </div>\n                    <button class="btn d-flex align-items-center justify-content-center" id="exportContacts">\n                        <i class="icon-download d-flex mr-1"></i>\n                        <span data-i18n="export.exportButton"></span>\n                    </button>\n                </div>\n            </div>\n        '
        //return '\n            <div class="contacts-export" style="height: 317px;">\n                <div class="banner">\n                    <img src="img/Excel_download.png" width="80">\n                    <span class="onlywhite" data-i18n="export.title"></span>\n                </div>\n                <div class="actions p-3 d-flex flex-column justify-content-between">\n                    <div>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" checked="" id="exportAllContacts">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="icon-phonebook d-flex mr-1"></i>\n                                <span data-i18n="export.allContacts"></span>\n                            </span>\n                        </label>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" checked="" id="exportAllChats">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-message"></i>\n                                <span data-i18n="export.allChatContacts"></span>\n                            </span>\n                        </label>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" checked="" id="exportGroups">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-users"></i>\n                                <span data-i18n="export.groupContacts"></span>\n                            </span>\n                        </label>\n                        <div class="form-group input-group mb-0 pl-4 pt-1 pb-2">\n                            <select name="groups" class="w-100">\n\n                            </select>\n                        </div>\n                        <label class="mb-1 d-flex align-items-center">\n                            <input type="checkbox" value="" id="exportLabels">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-tag"></i> \n                                <span data-i18n="export.labels"></span>\n                            </span>\n                        </label>\n                        <div class="form-group input-group mb-0 pl-4 pt-1 pb-2">\n                            <select name="labels" class="w-100">\n\n                            </select>\n                        </div>                        \n                        <label class="mb-1 d-flex align-items-center" style="display:none !important;" >\n                            <input type="checkbox" value="" id="exportBroadcasts">\n                            <span class="d-flex align-items-center ml-2">\n                                <i class="d-flex mr-1 icon-megaphone"></i> \n                                <span data-i18n="export.broadcasts"></span>\n                            </span>\n                        </label>\n                        <div class="form-group input-group mb-0 pl-4 pt-1 pb-2" style="display:none !important;">\n                            <select name="broadcasts" class="w-100">\n\n                            </select>\n                        </div>\n                    </div>\n                    <button class="btn d-flex align-items-center justify-content-center" id="exportContacts">\n                        <i class="icon-download d-flex mr-1"></i>\n                        <span data-i18n="export.exportButton"></span>\n                    </button>\n                </div>\n            </div>\n        '
    }, a.renderExportPageComponent = function() {
        this.props.exportPageRendered || (this.renderHeaderTemplate(), this.renderNavLinks(), this.renderPageContainer(), this.renderFooterTemplate(), this.pageContainer && this.pageContainer.append(this.exportPageComponent()));
        const t = $(".contacts-export"),
            n = t.find.bind(t),
            o = () => {
                const e = [...n("[name=groups]").parent().find(".lcslt .lcslt-multi-selected")].map((e => n(e).data("val")));
                this.props.toBeExported.selectedGroups = e
            };
        n("[name=groups]").prop("disabled", !this.props.toBeExported.groups), p(n("[name=groups]"), o, g(this.props.toBeExported.selectedGroups)), e.groups.length < 1 && (this.props.toBeExported.selectedGroups = []), o();
        const i = () => {
            const e = [...n("[name=labels]").parent().find(".lcslt .lcslt-multi-selected")].map((e => n(e).data("val")));
            this.props.toBeExported.selectedlabels = e
        };
        n("[name=labels]").prop("disabled", !this.props.toBeExported.labels), l(n("[name=labels]"), i, g(this.props.toBeExported.selectedlabels)), e.labels.length < 1 && (this.props.toBeExported.selectedlabels = []), i();
        const r = () => {
            const e = [...n("[name=broadcasts]").parent().find(".lcslt .lcslt-multi-selected")].map((e => n(e).data("val")));
            this.props.toBeExported.selectedBroadcasts = e
        };
        n("[name=broadcasts]").prop("disabled", !this.props.toBeExported.broadcasts), c(n("[name=broadcasts]"), r, this.props.toBeExported.selectedBroadcasts), e.broadcasts.length < 1 && (this.props.toBeExported.selectedBroadcasts = []), r(), $("#exportAllContacts").prop("checked", this.props.toBeExported.allContacts).off().on("change", (() => {
            this.props.toBeExported.allContacts = $("#exportAllContacts").prop("checked")
        })), $("#exportAllChats").prop("checked", this.props.toBeExported.allChats).off().on("change", (() => {
            this.props.toBeExported.allChats = $("#exportAllChats").prop("checked")
        })), $("#exportAllUnsaved").prop("checked", this.props.toBeExported.allUnSaved).off().on("change", (() => {
            this.props.toBeExported.allUnSaved = $("#exportAllUnsaved").prop("checked")
        })), $("#exportAllArchived").prop("checked", this.props.toBeExported.allArchived).off().on("change", (() => {
            this.props.toBeExported.allArchived = $("#exportAllArchived").prop("checked")
        })), $("#exportGroups").prop("checked", this.props.toBeExported.groups).off().on("change", (() => {
            this.props.toBeExported.groups = $("#exportGroups").prop("checked"), this.props.toBeExported.groups || (this.props.toBeExported.selectedGroups = [], this.renderExportPageComponent()), n("[name=groups]").prop("disabled", !this.props.toBeExported.groups), p(n("[name=groups]"), o, g(this.props.toBeExported.selectedGroups))
        })), $("#exportLabels").prop("checked", this.props.toBeExported.labels).off().on("change", (() => {
            s.isBusiness || ($("#exportLabels").prop("checked", !1), alert("labels are not applicable in Personal WhatsApp. It only works with Business WhatsApp.")), this.props.toBeExported.labels = $("#exportLabels").prop("checked"), this.props.toBeExported.labels || (this.props.toBeExported.selectedlabels = [], this.renderExportPageComponent()), n("[name=labels]").prop("disabled", !this.props.toBeExported.labels), l(n("[name=labels]"), i, g(this.props.toBeExported.selectedlabels))
        })), $("#exportBroadcasts").prop("checked", this.props.toBeExported.broadcasts).off().on("change", (() => {
            this.props.toBeExported.broadcasts = $("#exportBroadcasts").prop("checked"), this.props.toBeExported.broadcasts || (this.props.toBeExported.selectedBroadcasts = [], this.renderExportPageComponent()), n("[name=broadcasts]").prop("disabled", !this.props.toBeExported.broadcasts), c(n("[name=broadcasts]"), r, this.props.toBeExported.selectedBroadcasts)
        })), $("#exportContacts").off().on("click", (() => {
            if (!this.isActive()) return this.renderInactiveSubscriptionComponent();
            e.GetContacts().then((s => {
                console.log("Contacts : ", s);
                var t = XLSX.utils.book_new();
                if (t.Props = {
                        Title: "WA Biz WhatsApp Bulk Sender",
                        Subject: "Whatsapp Contacts",
                        Author: "WA Biz WhatsApp Bulk Sender",
                        CreatedDate: new Date
                    }, a.props.toBeExported.allContacts) {
                    t.SheetNames.push("PhoneContacts");
                    const e = s.contacts.filter((e => e.isWAContact && !e.isMe)).map((e => ({
                            Name: e.name,
                            ProfileName: e.displayName,
                            Phone: e.id.user,
                            IsBusiness: e.isBusiness ? "True" : "False",
                            IsBlocked: e.isContactBlocked ? "True" : "False"
                        }))),
                        n = XLSX.utils.json_to_sheet(e);
                    t.Sheets.PhoneContacts = n
                }
                if (a.props.toBeExported.allChats) {
                    t.SheetNames.push("Chats");
                    const e = s.chats.filter((e => !e.isGroup && !e.isBroadcast)).map((e => ({
                            Name: e.name,
                            ProfileName: e.displayName,
                            Phone: e.id
                        }))),
                        n = XLSX.utils.json_to_sheet(e);
                    t.Sheets.Chats = n
                }

                if (a.props.toBeExported.allUnSaved) {
                    t.SheetNames.push("UnSaved");
                    const e = s.chats.filter((e => !e.isGroup && !e.isBroadcast && !e.hasOwnProperty("name"))).map((e => ({
                            Name: e.displayName,
                            Phone: e.id
                        }))),
                        n = XLSX.utils.json_to_sheet(e);
                    t.Sheets.UnSaved = n
                }
                if (a.props.toBeExported.allArchived) {
                    t.SheetNames.push("Archived");
                    const e = s.chats.filter((e => !e.isGroup && !e.isBroadcast && e.archiveChat)).map((e => ({
                            Name: e.name,
                            ProfileName: e.displayName,
                            Phone: e.id
                        }))),
                        n = XLSX.utils.json_to_sheet(e);
                    t.Sheets.Archived = n
                }
                a.props.toBeExported.groups && a.props.toBeExported.selectedGroups.forEach((e => {
                    const n = s.groups.filter((s => s.id === e))[0];
                    if (!n) return;
                    let o = `Group - ${n.name}`;
                    o = o.replace("/", ""), o = o.replace("\\", ""), o = o.replace("*", ""), o = o.replace("?", ""), o = o.replace("]", ""), o = o.replace("[", ""), o = o.replace(":", ""), o.length > 31 && (o = o.substr(0, 25) + "-" + Math.random().toString().substring(2, 7)), t.SheetNames.push(o);
                    const a = g(n.participants).map((e => ({
                            Name: e.name,
                            ProfileName: e.displayName,
                            Phone: e.id,
                            IsBusiness: e.isBusiness ? "True" : "False",
                            IsBlocked: e.isContactBlocked ? "True" : "False"
                        }))),
                        i = XLSX.utils.json_to_sheet(a);
                    t.Sheets[o] = i
                })), a.props.toBeExported.labels && a.props.toBeExported.selectedlabels.forEach((n => {
                    const o = s.chats.filter((e => e.labels.length > 0)).filter((e => e.labels.find((e => e == n)))).map((e => ({
                        Name: e.displayName,
                        ProfileName: e.displayName,
                        Phone: e.id,
                        IsBusiness: e.isBusiness ? "True" : "False",
                        IsBlocked: e.isContactBlocked ? "True" : "False"
                    })));
                    if (!o) return;
                    let a = `Labels - ${[...e.labels].filter((e=>e.id==n))[0].name}`;
                    a = a.replace("/", ""), a = a.replace("\\", ""), a = a.replace("*", ""), a = a.replace("?", ""), a = a.replace("]", ""), a = a.replace("[", ""), a = a.replace(":", ""), a.length > 31 && (a = a.substr(0, 25) + "-" + Math.random().toString().substring(2, 7)), t.SheetNames.push(a);
                    const i = XLSX.utils.json_to_sheet(o);
                    t.Sheets[a] = i
                })), a.props.toBeExported.broadcasts && a.props.toBeExported.selectedBroadcasts.forEach((e => {
                    const n = s.broadcasts.filter((s => s.id == e))[0];
                    if (!n) return;
                    let o = `Broadcast - ${n.name}`;
                    o = o.replace("/", ""), o = o.replace("\\", ""), o = o.replace("*", ""), o = o.replace("?", ""), o = o.replace("]", ""), o = o.replace("[", ""), o = o.replace(":", ""), o.length > 31 && (o = o.substr(0, 25) + "-" + Math.random().toString().substring(2, 7)), t.SheetNames.push(o);
                    const a = g(n.participants).map((e => ({
                            Name: e.name,
                            ProfileName: e.displayName,
                            Phone: e.id,
                            IsBusiness: e.isBusiness ? "True" : "False",
                            IsBlocked: e.isContactBlocked ? "True" : "False"
                        }))),
                        i = XLSX.utils.json_to_sheet(a);
                    t.Sheets[o] = i
                }));
                var n = XLSX.write(t, {
                    bookType: "xlsx",
                    type: "binary"
                });

                function o(e) {
                    for (var s = new ArrayBuffer(e.length), t = new Uint8Array(s), n = 0; n < e.length; n++) t[n] = 255 & e.charCodeAt(n);
                    return s
                }
                saveAs(new Blob([o(n)], {
                    type: "application/octet-stream"
                }), `Whatsapp-Contacts-${Date.now()}.xlsx`)
            }))
        })), t.localize(), this.props.exportPageRendered = !0
    }, a.disposeExportPageComponent = function() {
        $(".contacts-export").remove(), this.props.exportPageRendered = !1
    }, a.enhancementPageComponent = function() {
        return '\n            <div class="enhancements">\n                <div class="privacy-enhancements mb-4">\n                    <div class="banner">\n                        <img src="img/privacy.png" width="40">\n                        <span class="onlywhite mt-2" style="color: #ffffff; font-weight: 500;"\n                            data-i18n="enhancement.privacy"></span>\n                    </div>\n                    <div class="actions py-4 px-4 d-flex flex-column justify-content-between">\n                        <div>\n                            <label class="mb-2 d-flex align-items-center">\n                                <input type="checkbox" value="" checked="" id="blurRecentMessages">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.blurRecentMessages"></span>\n                                </span>\n                            </label>\n                            <label class="mb-2 d-flex align-items-center">\n                                <input type="checkbox" value="" checked="" id="blurContactNames">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.blurContactNames"></span>\n                                </span>\n                            </label>\n                            <label class="mb-2 d-flex align-items-center">\n                                <input type="checkbox" value="" checked="" id="blurContactPhotos">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.blurContactPhotos"></span>\n                                </span>\n                            </label>\n                            <label class="mb-0 d-flex align-items-center">\n                                <input type="checkbox" value="" id="blurConversationMessages">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.blurConversationMessages"></span>\n                                </span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n                <div class="addons-enhancements">\n                    <div class="banner">\n                        <img src="img/addon.png" width="40">\n                        <span class="onlywhite mt-2" style="color: #ffffff; font-weight: 500;"\n                            data-i18n="enhancement.addons"></span>\n                    </div>\n                    <div class="actions py-4 px-4 d-flex flex-column justify-content-between">\n                        <div>\n                            <label class="mb-2 d-flex align-items-center">\n                                <input type="checkbox" value="" checked="" id="enableLikeButton">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.enableLikeButton"></span>\n                                </span>\n                            </label>\n                            <label class="mb-2 d-flex align-items-center">\n                                <input type="checkbox" value="" checked="" id="enableMessageReactions">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.enableMessageReactions"></span>\n                                </span>\n                            </label>\n                            <label class="mb-2 d-flex align-items-center">\n                                <input type="checkbox" value="" checked="" id="pinUnreadChats">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.pinUnreadChats"></span>\n                                </span>\n                            </label>\n                            <label class="mb-0 d-flex align-items-center">\n                                <input type="checkbox" value="" id="removeDuplicateContacts">\n                                <span class="d-flex align-items-center ml-2">\n                                    <span data-i18n="enhancement.removeDuplicateContacts"></span>\n                                </span>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        '
    }, a.renderEnhancementPageComponent = function() {
        this.props.enhancementPageRendered || (this.renderHeaderTemplate(), this.renderNavLinks(), this.renderPageContainer(), this.renderFooterTemplate(), this.pageContainer && this.pageContainer.append(this.enhancementPageComponent()));
        const s = $(".enhancements"),
            t = s.find.bind(s);
        t("#blurRecentMessages").prop("checked", this.props.enhancements.blurRecentMessages).off().on("change", (() => {
            this.props.enhancements.blurRecentMessages = t("#blurRecentMessages").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), t("#blurContactNames").prop("checked", this.props.enhancements.blurContactNames).off().on("change", (() => {
            this.props.enhancements.blurContactNames = t("#blurContactNames").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), t("#blurContactPhotos").prop("checked", this.props.enhancements.blurContactPhotos).off().on("change", (() => {
            this.props.enhancements.blurContactPhotos = t("#blurContactPhotos").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), t("#blurConversationMessages").prop("checked", this.props.enhancements.blurConversationMessages).off().on("change", (() => {
            this.props.enhancements.blurConversationMessages = t("#blurConversationMessages").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), t("#enableLikeButton").prop("checked", this.props.enhancements.enableLikeButton).off().on("change", (() => {
            this.props.enhancements.enableLikeButton = t("#enableLikeButton").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), t("#enableMessageReactions").prop("checked", this.props.enhancements.enableMessageReactions).off().on("change", (() => {
            this.props.enhancements.enableMessageReactions = t("#enableMessageReactions").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), t("#pinUnreadChats").prop("checked", this.props.enhancements.pinUnreadChats).off().on("change", (() => {
            this.props.enhancements.pinUnreadChats = t("#pinUnreadChats").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), t("#removeDuplicateContacts").prop("checked", this.props.enhancements.removeDuplicateContacts).off().on("change", (() => {
            this.props.enhancements.removeDuplicateContacts = t("#removeDuplicateContacts").prop("checked"), e.UpdateEnhancements(this.props.enhancements)
        })), s.localize(), this.props.enhancementPageRendered = !0
    }, a.disposeEnhancementPageComponent = function() {
        $(".enhancements").remove(), this.props.enhancementPageRendered = !1
    }, a.busyPageOverlayComponent = function() {
        return '\n            <div class="busy-page-overlay">\n                <p class="text-center" style="color: #ffffff; font-size: 20px; font-weight: 600; margin-top: 200px" data-i18n="appNotIdle"></p>\n            </div>\n        '
    }, a.renderBusyPageOverlayComponent = function() {
        this.props.busyPageOverlayRendered || $(".page-content").append(this.busyPageOverlayComponent());
        const e = $(".busy-page-overlay");
        let s = !1;
        this.props.isBusy && (s = !1, "sendMessage" === this.props.page && (s = !0)), e.css({
            display: s ? "block" : "none"
        }), $(".page-content").css({
            overflowY: s ? "hidden" : "auto"
        }), e.localize(), this.props.busyPageOverlayRendered = !0
    }, a.disposeBusyPageOverlayComponent = function() {
        $(".busy-page-overlay").remove(), this.props.busyPageOverlayRendered = !1
    }, a.inactiveSubscriptionComponent = function() {
        return `\n            <div class="inactive-subscription-modal">\n                <div class="pws-modal d-flex flex-column">\n                    <div class="pws-modal-head position-relative">\n                        <div class="title" data-i18n="inactiveSub.title"></div>\n                        <div class="close position-absolute mr-2 mt-2"\n                            style="cursor: pointer; font-weight: 400; top: 0px; right: 0px; font-size: 18px;">x</div>\n                    </div>\n                    <div class="pws-modal-content">\n                        <div class="mb-2 text-center">\n                            <span>\n                                <span data-i18n="inactiveSub.forPremiumUsersOnly"></span>\n                                <br />\n                                <span data-i18n="inactiveSub.upgradeForAccess"></span>\n                            </span>\n                            <a target="_blank" href="https://wabiz.in?mobile=${(e.me.length&&e.me[0].id&&e.me[0].id.user).replace("+","")||""}" class="btn bg-primary d-block mt-3 text-white" data-i18n="inactiveSub.upgradeBtn"></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `
    }, a.renderInactiveSubscriptionComponent = function() {
        this.props.inactiveSubscriptionRendered || $(".page-content").append(this.inactiveSubscriptionComponent());
        const e = $(".inactive-subscription-modal");
        e.find.bind(e)(".close").off().on("click", (() => {
            this.disposeInactiveSubscriptionComponent()
        })), $(".page-content").addClass("inactive-subscription"), e.localize(), this.props.inactiveSubscriptionRendered = !0
    }, a.disposeInactiveSubscriptionComponent = function() {
        $(".inactive-subscription-modal").remove(), $(".page-content").removeClass("inactive-subscription"), this.props.inactiveSubscriptionRendered = !1
    }, a.whatsAppNotOpened = function() {
        return `\n            <div style="overflow-y: hidden; width: 600px;">\n                <div class="header-links">\n                    <div class="other-links">\n                    <span class="logoaction logoactionx d-none"><img class="procrown" src="../img/main-icon.png"/></span>\n                    <span class="logoaction">WA Biz Sender Lite</span>\n                </div>\n                    <div class="other-links">\n                        <a href="https://chrome.google.com/webstore/detail/wa-biz-free-bulk-sender/njlokjfmljicmjpongdkpgkpcemppmbn/reviews" target="_blank" data-i18n="nav.faq"></a>\n                        <a href="#" class="clsLiveSupport"><i class="wa icon-question-o"></i>${i18next.t("nav.liveSupport")}</a>\n                        <a href="#" data-i18n="nav.clientArea"></a>\n                        <a href="https://wabiz.in" target="_blank"><span data-i18n="nav.version"></span>: ${chrome.runtime.getManifest().version}</a>\n                    </div>\n                </div>\n                <div class="page-content px-3 py-3 position-relative" style="overflow-y: hidden; height: auto;">\n                    <div>\n                        <button class="w-50 btn text-light d-block open-whatsapp mt-2" style="background-color: #44cdb3; margin:auto;" data-i18n="openWhatsapp"></button>\n                    </div>\n                </div>\n            </div>\n        `
    }, a.renderWhatsAppNotOpened = function() {
        $(document.body).append(this.whatsAppNotOpened()), $(".app-container").remove(), $(document.body).find(".open-whatsapp").off().on("click", (function() {
            window.open("https://web.whatsapp.com"), window.close()
        })), $(document.body).localize(), this.disableAdditionalRenders = !0
    }, a.whatsAppNotFocused = function() {
        return `\n            <div style="overflow-y: hidden; width: 600px;">\n                <div class="header-links">\n                    <div class="other-links">\n                    <span class="logoaction logoactionx d-none"><img class="procrown" src="../img/main-icon.png"/></span>\n                    <span class="logoaction">WA Biz Sender Lite</span>\n                </div>\n                    <div class="other-links">\n                        <a href="https://chrome.google.com/webstore/detail/wa-biz-free-bulk-sender/njlokjfmljicmjpongdkpgkpcemppmbn/reviews" target="_blank" data-i18n="nav.faq"></a>\n                        <a href="#" class="clsLiveSupport"><i class="wa icon-question-o"></i>${i18next.t("nav.liveSupport")}</a>\n                        <a href="#" data-i18n="nav.clientArea"></a>\n                        <a href="https://wabiz.in" target="_blank"><span data-i18n="nav.version"></span>: ${chrome.runtime.getManifest().version}</a>\n                    </div>\n                </div>\n                <div class="page-content px-3 py-3 position-relative" style="overflow-y: hidden; height: auto;">\n                    <div class="msgs-container">\n                        \n                    </div>\n                </div>\n                 <div class="footer px-2">\n                    <p class="mb-0 text-light" style="font-weight: 500;"></p>\n                    <p class="mb-0 text-light" style="font-weight: 500; display: none;"></p>\n                </div>\n            </div>\n        `
    }, a.unreadMessageTemplate = function() {
        return '\n            <div class="unread-message">\n                <div class="details">\n                    <div class="name"></div>\n                    <div class="last-message"></div>\n                </div>\n            </div>\n        '
    }, a.noUnreadMessageTemplate = function() {
        return '\n            <div class="no-unread-message" style="margin: 1rem;">\n                <p class="mt-2 mb-2 text-center unread-messages" data-i18n="noUnreadMessages"></p>\n                <button class="w-50 btn text-light d-block go-to-whatsapp mt-1" style="background-color: #44cdb3; margin:auto;" data-i18n="gotoWhatsapp"></button>\n            </div>\n        '
    }, a.defaultThumbnail = function() {
        return '\n            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 212 212" width="212" height="212" class="thumb"><path fill="#DFE5E7" class="background" d="M106.251.5C164.653.5 212 47.846 212 106.25S164.653 212 106.25 212C47.846 212 .5 164.654.5 106.25S47.846.5 106.251.5z"></path><path fill="#FFF" class="primary" d="M173.561 171.615a62.767 62.767 0 0 0-2.065-2.955 67.7 67.7 0 0 0-2.608-3.299 70.112 70.112 0 0 0-3.184-3.527 71.097 71.097 0 0 0-5.924-5.47 72.458 72.458 0 0 0-10.204-7.026 75.2 75.2 0 0 0-5.98-3.055c-.062-.028-.118-.059-.18-.087-9.792-4.44-22.106-7.529-37.416-7.529s-27.624 3.089-37.416 7.529c-.338.153-.653.318-.985.474a75.37 75.37 0 0 0-6.229 3.298 72.589 72.589 0 0 0-9.15 6.395 71.243 71.243 0 0 0-5.924 5.47 70.064 70.064 0 0 0-3.184 3.527 67.142 67.142 0 0 0-2.609 3.299 63.292 63.292 0 0 0-2.065 2.955 56.33 56.33 0 0 0-1.447 2.324c-.033.056-.073.119-.104.174a47.92 47.92 0 0 0-1.07 1.926c-.559 1.068-.818 1.678-.818 1.678v.398c18.285 17.927 43.322 28.985 70.945 28.985 27.678 0 52.761-11.103 71.055-29.095v-.289s-.619-1.45-1.992-3.778a58.346 58.346 0 0 0-1.446-2.322zM106.002 125.5c2.645 0 5.212-.253 7.68-.737a38.272 38.272 0 0 0 3.624-.896 37.124 37.124 0 0 0 5.12-1.958 36.307 36.307 0 0 0 6.15-3.67 35.923 35.923 0 0 0 9.489-10.48 36.558 36.558 0 0 0 2.422-4.84 37.051 37.051 0 0 0 1.716-5.25c.299-1.208.542-2.443.725-3.701.275-1.887.417-3.827.417-5.811s-.142-3.925-.417-5.811a38.734 38.734 0 0 0-1.215-5.494 36.68 36.68 0 0 0-3.648-8.298 35.923 35.923 0 0 0-9.489-10.48 36.347 36.347 0 0 0-6.15-3.67 37.124 37.124 0 0 0-5.12-1.958 37.67 37.67 0 0 0-3.624-.896 39.875 39.875 0 0 0-7.68-.737c-21.162 0-37.345 16.183-37.345 37.345 0 21.159 16.183 37.342 37.345 37.342z"></path></svg>\n        '
    }, a.renderWhatsAppNotFocused = function() {
        $(document.body).append(this.whatsAppNotFocused()), $(".app-container").remove(), e.unreadMessages.length > 0 ? e.unreadMessages.forEach((s => {
            let t = $(this.unreadMessageTemplate());
            s.img ? t.prepend(`<img class="thumb" src="${s.img}">`) : t.prepend(this.defaultThumbnail()), t.off().on("click", (function() {
                e.FocusOnTab(), window.close()
            })), t.find(".name").html(s.name || `+${s.user}`), t.find(".last-message").html(s.isMedia ? `<i style="text-transform: capitalize;">Media (${s.type})</i>` : s.lastMessage), $(".msgs-container").append(t)
        })) : ($(".msgs-container").append(this.noUnreadMessageTemplate()), $(document.body).find(".go-to-whatsapp").off().on("click", (function() {
            e.FocusOnTab(), window.close()
        }))); {
            const e = $(".footer"),
                t = e.find.bind(e);
            t("p:last-child").css({
                display: "none"
            }), s ? (t("p:first-child").text(`${s.displayName} +${s.id.user}`), this.props.profile && this.props.profile.status ? t("p:last-child").css({
                display: "block"
            }).text(i18next.t("remainingSubscription", {
                days: this.props.profile.daysremaining
            })) : t("p:last-child").css({
                display: "block"
            }).text(i18next.t("noActiveSubscription")), this.props.profile && this.props.profile.status ? $(".logoactionx").removeClass("d-none") : $(".logoactionx").addClass("d-none")) : t("p").css({
                display: "none"
            })
        }
        $(document.body).localize(), this.disableAdditionalRenders = !0
    }, a.whatsAppNotConnected = function() {
        return `\n            <div style="overflow-y: hidden; width: 600px;">\n                <div class="header-links">\n                    <div class="other-links">\n                    <span class="logoaction logoactionx d-none"><img class="procrown" src="../img/main-icon.png"/></span>\n                    <span class="logoaction">WA Biz Sender Lite</span>\n                </div>\n                    <div class="other-links">\n                        <a href="https://chrome.google.com/webstore/detail/wa-biz-free-bulk-sender/njlokjfmljicmjpongdkpgkpcemppmbn/reviews" target="_blank" data-i18n="nav.faq"></a>\n                        <a href="#" class="clsLiveSupport"><i class="wa icon-question-o"></i>${i18next.t("nav.liveSupport")}</a>\n                        <a href="#" data-i18n="nav.clientArea"></a>\n                        <a href="https://wabiz.in" target="_blank"><span data-i18n="nav.version"></span>: ${chrome.runtime.getManifest().version}</a>\n                    </div>\n                </div>\n                <div class="page-content px-3 py-3 position-relative" style="overflow-y: hidden; height: auto;">\n                    <p data-i18n="whatsAppNotConnected" class="text-center"></p>\n                    <div>\n                        <button class="w-50 btn text-light d-block reload-whatsapp mt-2" style="background-color: #44cdb3; margin:auto;" data-i18n="reloadWhatsAppNotConnected"></button>\n                    </div>\n                </div>\n            </div>\n        `
    }, a.renderWhatsAppNotConnected = function() {
        $(document.body).append(this.whatsAppNotConnected()), $(".app-container").remove(), $(document.body).find(".reload-whatsapp").off().on("click", (function() {
            e.reloadOrCreateActiveTab(), window.close()
        })), $(document.body).localize(), this.disableAdditionalRenders = !0
    }, a.loaderComponent = function() {
        return `\n            <div style="overflow-y: hidden; width: 100%;" class="loader-container">\n                <div class="header-links">\n                    <div class="other-links">\n                    <span class="logoaction logoactionx d-none"><img class="procrown" src="../img/main-icon.png"/></span>\n                    <span class="logoaction">WA Biz Sender Lite</span>\n                </div>\n                    <div class="other-links">\n                        <a href="https://chrome.google.com/webstore/detail/wa-biz-free-bulk-sender/njlokjfmljicmjpongdkpgkpcemppmbn/reviews" target="_blank" data-i18n="nav.faq"></a>\n                        <a href="#" class="clsLiveSupport"><i class="wa icon-question-o"></i>${i18next.t("nav.liveSupport")}</a>\n                        <a href="#" data-i18n="nav.clientArea"></a>\n                        <a href="https://wabiz.in" target="_blank"><span data-i18n="nav.version"></span>: ${chrome.runtime.getManifest().version}</a>\n                    </div>\n                </div>\n                <div class="page-content px-3 py-3 position-relative" style="overflow-y: hidden; height: auto;">\n                    <div class="d-flex justify-content-center align-items-center" style="height: 300px;">\n                        <div class="loader"></div>\n                    </div>\n                </div>\n            </div>\n        `
    }, a.renderLoaderComponent = function() {
        this.props.loaderRendered || this.appContainer.append(this.loaderComponent()), this.props.loaderRendered = !0
    }, a.disposeLoaderComponent = function() {
        $(".loader-container").remove(), this.props.loaderRendered = !1
    }, a.disableAdditionalRenders = !1, a.render = function() {
        if (this.disableAdditionalRenders) return;
        (() => {
            switch (o(), this.props.page) {
                case "reports":
                    this.disposeSendMessageComponent(), this.disposeExportPageComponent(), this.disposeEnhancementPageComponent(), this.renderReportsComponent();
                    break;
                case "export":
                    this.disposeSendMessageComponent(), this.disposeReportsComponent(), this.disposeEnhancementPageComponent(), this.renderExportPageComponent();
                    break;
                case "enhancements":
                    this.disposeSendMessageComponent(), this.disposeReportsComponent(), this.disposeExportPageComponent(), this.renderEnhancementPageComponent();
                    break;
                default:
                    this.disposeReportsComponent(), this.disposeExportPageComponent(), this.disposeEnhancementPageComponent(), this.renderSendMessageComponent()
            }
            this.renderBusyPageOverlayComponent(), $(".nav-links a").removeClass("active"), $(`.nav-links a[data-page=${this.props.page}]`).addClass("active")
        })()
    }, a.dispose = function() {
        this.disposeSendMessageComponent(), this.disposeExportPageComponent(), this.disposeReportsComponent()
    };
    const f = e.IsWhatsAppConnected().catch((e => !1));
    let x = [];
    window.addEventListener("load", (function() {
        console.log("BP.popupProps: ", e.popupProps);
        e.popupProps ? a.props = { ...a.defaultProps,
            ...g(e.popupProps),
            ...g(a.staticOnMount)
        } : a.props = { ...g(a.defaultProps)
        };
        a.renderLoaderComponent();
        const s = [e.language].map((e => fetch(`/locales/${e}.json`).then((e => e.json())).then((s => ({
            lng: e,
            messages: s
        })))));
        Promise.all(s).then((s => {
            const t = {};
            for (let e of s) t[e.lng] = {
                translation: e.messages
            };
            i18next.init({
                lng: e.language,
                resources: t
            }, (function(s, t) {
                jqueryI18next.init(i18next, $, {
                    tName: "t",
                    i18nName: "i18n",
                    handleName: "localize",
                    selectorAttr: "data-i18n",
                    targetAttr: "i18n-target",
                    optionsAttr: "i18n-options",
                    useOptionsAttr: !1,
                    parseDefaultValueFromContent: !0
                }), Promise.all([e.IsWhatsAppOpen(), e.IsWhatsAppFocused()]).then((e => {})), Promise.all([f, new Promise((s => {
                    ! function t() {
                        if (e.me[0]) return s();
                        setTimeout(t, 500)
                    }()
                }))]).then((s => {
                    const [t] = s;
                    if (o(), a.props.profile = g(e.profile), !t) return a.renderWhatsAppNotConnected();
                    a.disposeLoaderComponent(), a.render(), e.WatchReload((() => window.close())), e.WatchProfileUpdate((e => {
                        o(), JSON.stringify(a.props.profile) !== JSON.stringify(e) && (a.props.profile = e, a.dispose(), a.render())
                    })), e.WatchTemplatesUpdate((() => {
                        a.dispose(), a.render()
                    })), e.WatchReports(((e, s) => {
                        a.props.reports = e, a.props.isBusy = g(s), a.props.reportsRendered && a.renderReportsComponent()
                    })), e.WatchFilterReports(((e, s, t, n, o, i, r) => {
                        a.props.filterContacts = e, a.props.filterValids = s, a.props.filterInvalids = t, a.props.filterPendings = n, a.props.filterPaused = i, a.props.filterStarttime = o, a.props.isBusy = g(r), a.props.reportsRendered && a.renderReportsComponent()
                    })), e.APIHelper.FetchProfile(), e.GetContacts().then((e => {
                        x = e.chats
                    }))
                })).catch((e => {
                    console.log(e), a.disposeLoaderComponent(), a.renderWhatsAppNotConnected()
                }))
            }))
        }))
    })), window.addEventListener("unload", (function() {
        e.popupProps = { ...g(a.props)
        }
    }))
}();